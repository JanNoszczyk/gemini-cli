/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: gemini.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gemini {
    export enum AutoCompleteContext {
        CONTEXT_CHAT_INPUT = 0,
        CONTEXT_FILE_PATH = 1,
        CONTEXT_COMMAND = 2
    }
    export enum ApprovalMode {
        APPROVAL_MODE_UNSPECIFIED = 0,
        DEFAULT = 1,
        AUTO_EDIT = 2,
        YOLO = 3
    }
    export enum CompletionType {
        COMPLETION_FILE_PATH = 0,
        COMPLETION_COMMAND = 1,
        COMPLETION_TOOL_NAME = 2,
        COMPLETION_MODEL_NAME = 3
    }
    export enum FileOperation {
        CREATE = 0,
        EDIT = 1,
        DELETE = 2,
        RENAME = 3
    }
    export class ClientRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            start_request?: StartRequest;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: ChatMessage;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: ToolConfirmationResponse;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: ConfigUpdateRequest;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: RefreshContextRequest;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: CancelOperationRequest;
            get_help?: never;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: GetHelpRequest;
            auto_complete?: never;
        } | {
            start_request?: never;
            chat_message?: never;
            tool_confirmation?: never;
            config_update?: never;
            refresh_context?: never;
            cancel_operation?: never;
            get_help?: never;
            auto_complete?: AutoCompleteRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_request" in data && data.start_request != undefined) {
                    this.start_request = data.start_request;
                }
                if ("chat_message" in data && data.chat_message != undefined) {
                    this.chat_message = data.chat_message;
                }
                if ("tool_confirmation" in data && data.tool_confirmation != undefined) {
                    this.tool_confirmation = data.tool_confirmation;
                }
                if ("config_update" in data && data.config_update != undefined) {
                    this.config_update = data.config_update;
                }
                if ("refresh_context" in data && data.refresh_context != undefined) {
                    this.refresh_context = data.refresh_context;
                }
                if ("cancel_operation" in data && data.cancel_operation != undefined) {
                    this.cancel_operation = data.cancel_operation;
                }
                if ("get_help" in data && data.get_help != undefined) {
                    this.get_help = data.get_help;
                }
                if ("auto_complete" in data && data.auto_complete != undefined) {
                    this.auto_complete = data.auto_complete;
                }
            }
        }
        get start_request() {
            return pb_1.Message.getWrapperField(this, StartRequest, 1) as StartRequest;
        }
        set start_request(value: StartRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_start_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chat_message() {
            return pb_1.Message.getWrapperField(this, ChatMessage, 2) as ChatMessage;
        }
        set chat_message(value: ChatMessage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_chat_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tool_confirmation() {
            return pb_1.Message.getWrapperField(this, ToolConfirmationResponse, 3) as ToolConfirmationResponse;
        }
        set tool_confirmation(value: ToolConfirmationResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_tool_confirmation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get config_update() {
            return pb_1.Message.getWrapperField(this, ConfigUpdateRequest, 4) as ConfigUpdateRequest;
        }
        set config_update(value: ConfigUpdateRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_config_update() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get refresh_context() {
            return pb_1.Message.getWrapperField(this, RefreshContextRequest, 5) as RefreshContextRequest;
        }
        set refresh_context(value: RefreshContextRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_refresh_context() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get cancel_operation() {
            return pb_1.Message.getWrapperField(this, CancelOperationRequest, 6) as CancelOperationRequest;
        }
        set cancel_operation(value: CancelOperationRequest) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_cancel_operation() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get get_help() {
            return pb_1.Message.getWrapperField(this, GetHelpRequest, 7) as GetHelpRequest;
        }
        set get_help(value: GetHelpRequest) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_get_help() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get auto_complete() {
            return pb_1.Message.getWrapperField(this, AutoCompleteRequest, 8) as AutoCompleteRequest;
        }
        set auto_complete(value: AutoCompleteRequest) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_auto_complete() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "start_request" | "chat_message" | "tool_confirmation" | "config_update" | "refresh_context" | "cancel_operation" | "get_help" | "auto_complete";
            } = {
                0: "none",
                1: "start_request",
                2: "chat_message",
                3: "tool_confirmation",
                4: "config_update",
                5: "refresh_context",
                6: "cancel_operation",
                7: "get_help",
                8: "auto_complete"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            start_request?: ReturnType<typeof StartRequest.prototype.toObject>;
            chat_message?: ReturnType<typeof ChatMessage.prototype.toObject>;
            tool_confirmation?: ReturnType<typeof ToolConfirmationResponse.prototype.toObject>;
            config_update?: ReturnType<typeof ConfigUpdateRequest.prototype.toObject>;
            refresh_context?: ReturnType<typeof RefreshContextRequest.prototype.toObject>;
            cancel_operation?: ReturnType<typeof CancelOperationRequest.prototype.toObject>;
            get_help?: ReturnType<typeof GetHelpRequest.prototype.toObject>;
            auto_complete?: ReturnType<typeof AutoCompleteRequest.prototype.toObject>;
        }): ClientRequest {
            const message = new ClientRequest({});
            if (data.start_request != null) {
                message.start_request = StartRequest.fromObject(data.start_request);
            }
            if (data.chat_message != null) {
                message.chat_message = ChatMessage.fromObject(data.chat_message);
            }
            if (data.tool_confirmation != null) {
                message.tool_confirmation = ToolConfirmationResponse.fromObject(data.tool_confirmation);
            }
            if (data.config_update != null) {
                message.config_update = ConfigUpdateRequest.fromObject(data.config_update);
            }
            if (data.refresh_context != null) {
                message.refresh_context = RefreshContextRequest.fromObject(data.refresh_context);
            }
            if (data.cancel_operation != null) {
                message.cancel_operation = CancelOperationRequest.fromObject(data.cancel_operation);
            }
            if (data.get_help != null) {
                message.get_help = GetHelpRequest.fromObject(data.get_help);
            }
            if (data.auto_complete != null) {
                message.auto_complete = AutoCompleteRequest.fromObject(data.auto_complete);
            }
            return message;
        }
        toObject() {
            const data: {
                start_request?: ReturnType<typeof StartRequest.prototype.toObject>;
                chat_message?: ReturnType<typeof ChatMessage.prototype.toObject>;
                tool_confirmation?: ReturnType<typeof ToolConfirmationResponse.prototype.toObject>;
                config_update?: ReturnType<typeof ConfigUpdateRequest.prototype.toObject>;
                refresh_context?: ReturnType<typeof RefreshContextRequest.prototype.toObject>;
                cancel_operation?: ReturnType<typeof CancelOperationRequest.prototype.toObject>;
                get_help?: ReturnType<typeof GetHelpRequest.prototype.toObject>;
                auto_complete?: ReturnType<typeof AutoCompleteRequest.prototype.toObject>;
            } = {};
            if (this.start_request != null) {
                data.start_request = this.start_request.toObject();
            }
            if (this.chat_message != null) {
                data.chat_message = this.chat_message.toObject();
            }
            if (this.tool_confirmation != null) {
                data.tool_confirmation = this.tool_confirmation.toObject();
            }
            if (this.config_update != null) {
                data.config_update = this.config_update.toObject();
            }
            if (this.refresh_context != null) {
                data.refresh_context = this.refresh_context.toObject();
            }
            if (this.cancel_operation != null) {
                data.cancel_operation = this.cancel_operation.toObject();
            }
            if (this.get_help != null) {
                data.get_help = this.get_help.toObject();
            }
            if (this.auto_complete != null) {
                data.auto_complete = this.auto_complete.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_request)
                writer.writeMessage(1, this.start_request, () => this.start_request.serialize(writer));
            if (this.has_chat_message)
                writer.writeMessage(2, this.chat_message, () => this.chat_message.serialize(writer));
            if (this.has_tool_confirmation)
                writer.writeMessage(3, this.tool_confirmation, () => this.tool_confirmation.serialize(writer));
            if (this.has_config_update)
                writer.writeMessage(4, this.config_update, () => this.config_update.serialize(writer));
            if (this.has_refresh_context)
                writer.writeMessage(5, this.refresh_context, () => this.refresh_context.serialize(writer));
            if (this.has_cancel_operation)
                writer.writeMessage(6, this.cancel_operation, () => this.cancel_operation.serialize(writer));
            if (this.has_get_help)
                writer.writeMessage(7, this.get_help, () => this.get_help.serialize(writer));
            if (this.has_auto_complete)
                writer.writeMessage(8, this.auto_complete, () => this.auto_complete.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_request, () => message.start_request = StartRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.chat_message, () => message.chat_message = ChatMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.tool_confirmation, () => message.tool_confirmation = ToolConfirmationResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.config_update, () => message.config_update = ConfigUpdateRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.refresh_context, () => message.refresh_context = RefreshContextRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.cancel_operation, () => message.cancel_operation = CancelOperationRequest.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.get_help, () => message.get_help = GetHelpRequest.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.auto_complete, () => message.auto_complete = AutoCompleteRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientRequest {
            return ClientRequest.deserialize(bytes);
        }
    }
    export class StartRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            initial_prompt?: string;
            model?: string;
            embedding_model?: string;
            approval_mode?: ApprovalMode;
            core_tools?: string[];
            exclude_tools?: string[];
            mcp_servers?: McpServerConfig[];
            theme?: string;
            editor_type?: string;
            show_tool_descriptions?: boolean;
            show_error_details?: boolean;
            resume_from_checkpoint?: boolean;
            checkpoint_tag?: string;
            advanced_config?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("initial_prompt" in data && data.initial_prompt != undefined) {
                    this.initial_prompt = data.initial_prompt;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("embedding_model" in data && data.embedding_model != undefined) {
                    this.embedding_model = data.embedding_model;
                }
                if ("approval_mode" in data && data.approval_mode != undefined) {
                    this.approval_mode = data.approval_mode;
                }
                if ("core_tools" in data && data.core_tools != undefined) {
                    this.core_tools = data.core_tools;
                }
                if ("exclude_tools" in data && data.exclude_tools != undefined) {
                    this.exclude_tools = data.exclude_tools;
                }
                if ("mcp_servers" in data && data.mcp_servers != undefined) {
                    this.mcp_servers = data.mcp_servers;
                }
                if ("theme" in data && data.theme != undefined) {
                    this.theme = data.theme;
                }
                if ("editor_type" in data && data.editor_type != undefined) {
                    this.editor_type = data.editor_type;
                }
                if ("show_tool_descriptions" in data && data.show_tool_descriptions != undefined) {
                    this.show_tool_descriptions = data.show_tool_descriptions;
                }
                if ("show_error_details" in data && data.show_error_details != undefined) {
                    this.show_error_details = data.show_error_details;
                }
                if ("resume_from_checkpoint" in data && data.resume_from_checkpoint != undefined) {
                    this.resume_from_checkpoint = data.resume_from_checkpoint;
                }
                if ("checkpoint_tag" in data && data.checkpoint_tag != undefined) {
                    this.checkpoint_tag = data.checkpoint_tag;
                }
                if ("advanced_config" in data && data.advanced_config != undefined) {
                    this.advanced_config = data.advanced_config;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get initial_prompt() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set initial_prompt(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get embedding_model() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set embedding_model(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get approval_mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, ApprovalMode.APPROVAL_MODE_UNSPECIFIED) as ApprovalMode;
        }
        set approval_mode(value: ApprovalMode) {
            pb_1.Message.setField(this, 5, value);
        }
        get core_tools() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set core_tools(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get exclude_tools() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set exclude_tools(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get mcp_servers() {
            return pb_1.Message.getRepeatedWrapperField(this, McpServerConfig, 8) as McpServerConfig[];
        }
        set mcp_servers(value: McpServerConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get theme() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set theme(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get editor_type() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set editor_type(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get show_tool_descriptions() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set show_tool_descriptions(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get show_error_details() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set show_error_details(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get resume_from_checkpoint() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set resume_from_checkpoint(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get checkpoint_tag() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set checkpoint_tag(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get advanced_config() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 15) as dependency_1.google.protobuf.Struct;
        }
        set advanced_config(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_advanced_config() {
            return pb_1.Message.getField(this, 15) != null;
        }
        static fromObject(data: {
            session_id?: string;
            initial_prompt?: string;
            model?: string;
            embedding_model?: string;
            approval_mode?: ApprovalMode;
            core_tools?: string[];
            exclude_tools?: string[];
            mcp_servers?: ReturnType<typeof McpServerConfig.prototype.toObject>[];
            theme?: string;
            editor_type?: string;
            show_tool_descriptions?: boolean;
            show_error_details?: boolean;
            resume_from_checkpoint?: boolean;
            checkpoint_tag?: string;
            advanced_config?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): StartRequest {
            const message = new StartRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.initial_prompt != null) {
                message.initial_prompt = data.initial_prompt;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.embedding_model != null) {
                message.embedding_model = data.embedding_model;
            }
            if (data.approval_mode != null) {
                message.approval_mode = data.approval_mode;
            }
            if (data.core_tools != null) {
                message.core_tools = data.core_tools;
            }
            if (data.exclude_tools != null) {
                message.exclude_tools = data.exclude_tools;
            }
            if (data.mcp_servers != null) {
                message.mcp_servers = data.mcp_servers.map(item => McpServerConfig.fromObject(item));
            }
            if (data.theme != null) {
                message.theme = data.theme;
            }
            if (data.editor_type != null) {
                message.editor_type = data.editor_type;
            }
            if (data.show_tool_descriptions != null) {
                message.show_tool_descriptions = data.show_tool_descriptions;
            }
            if (data.show_error_details != null) {
                message.show_error_details = data.show_error_details;
            }
            if (data.resume_from_checkpoint != null) {
                message.resume_from_checkpoint = data.resume_from_checkpoint;
            }
            if (data.checkpoint_tag != null) {
                message.checkpoint_tag = data.checkpoint_tag;
            }
            if (data.advanced_config != null) {
                message.advanced_config = dependency_1.google.protobuf.Struct.fromObject(data.advanced_config);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                initial_prompt?: string;
                model?: string;
                embedding_model?: string;
                approval_mode?: ApprovalMode;
                core_tools?: string[];
                exclude_tools?: string[];
                mcp_servers?: ReturnType<typeof McpServerConfig.prototype.toObject>[];
                theme?: string;
                editor_type?: string;
                show_tool_descriptions?: boolean;
                show_error_details?: boolean;
                resume_from_checkpoint?: boolean;
                checkpoint_tag?: string;
                advanced_config?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.initial_prompt != null) {
                data.initial_prompt = this.initial_prompt;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.embedding_model != null) {
                data.embedding_model = this.embedding_model;
            }
            if (this.approval_mode != null) {
                data.approval_mode = this.approval_mode;
            }
            if (this.core_tools != null) {
                data.core_tools = this.core_tools;
            }
            if (this.exclude_tools != null) {
                data.exclude_tools = this.exclude_tools;
            }
            if (this.mcp_servers != null) {
                data.mcp_servers = this.mcp_servers.map((item: McpServerConfig) => item.toObject());
            }
            if (this.theme != null) {
                data.theme = this.theme;
            }
            if (this.editor_type != null) {
                data.editor_type = this.editor_type;
            }
            if (this.show_tool_descriptions != null) {
                data.show_tool_descriptions = this.show_tool_descriptions;
            }
            if (this.show_error_details != null) {
                data.show_error_details = this.show_error_details;
            }
            if (this.resume_from_checkpoint != null) {
                data.resume_from_checkpoint = this.resume_from_checkpoint;
            }
            if (this.checkpoint_tag != null) {
                data.checkpoint_tag = this.checkpoint_tag;
            }
            if (this.advanced_config != null) {
                data.advanced_config = this.advanced_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.initial_prompt.length)
                writer.writeString(2, this.initial_prompt);
            if (this.model.length)
                writer.writeString(3, this.model);
            if (this.embedding_model.length)
                writer.writeString(4, this.embedding_model);
            if (this.approval_mode != ApprovalMode.APPROVAL_MODE_UNSPECIFIED)
                writer.writeEnum(5, this.approval_mode);
            if (this.core_tools.length)
                writer.writeRepeatedString(6, this.core_tools);
            if (this.exclude_tools.length)
                writer.writeRepeatedString(7, this.exclude_tools);
            if (this.mcp_servers.length)
                writer.writeRepeatedMessage(8, this.mcp_servers, (item: McpServerConfig) => item.serialize(writer));
            if (this.theme.length)
                writer.writeString(9, this.theme);
            if (this.editor_type.length)
                writer.writeString(10, this.editor_type);
            if (this.show_tool_descriptions != false)
                writer.writeBool(11, this.show_tool_descriptions);
            if (this.show_error_details != false)
                writer.writeBool(12, this.show_error_details);
            if (this.resume_from_checkpoint != false)
                writer.writeBool(13, this.resume_from_checkpoint);
            if (this.checkpoint_tag.length)
                writer.writeString(14, this.checkpoint_tag);
            if (this.has_advanced_config)
                writer.writeMessage(15, this.advanced_config, () => this.advanced_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.initial_prompt = reader.readString();
                        break;
                    case 3:
                        message.model = reader.readString();
                        break;
                    case 4:
                        message.embedding_model = reader.readString();
                        break;
                    case 5:
                        message.approval_mode = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        reader.readMessage(message.mcp_servers, () => pb_1.Message.addToRepeatedWrapperField(message, 8, McpServerConfig.deserialize(reader), McpServerConfig));
                        break;
                    case 9:
                        message.theme = reader.readString();
                        break;
                    case 10:
                        message.editor_type = reader.readString();
                        break;
                    case 11:
                        message.show_tool_descriptions = reader.readBool();
                        break;
                    case 12:
                        message.show_error_details = reader.readBool();
                        break;
                    case 13:
                        message.resume_from_checkpoint = reader.readBool();
                        break;
                    case 14:
                        message.checkpoint_tag = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.advanced_config, () => message.advanced_config = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartRequest {
            return StartRequest.deserialize(bytes);
        }
    }
    export class ChatMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            is_shell_command?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("is_shell_command" in data && data.is_shell_command != undefined) {
                    this.is_shell_command = data.is_shell_command;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_shell_command() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_shell_command(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            content?: string;
            is_shell_command?: boolean;
        }): ChatMessage {
            const message = new ChatMessage({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.is_shell_command != null) {
                message.is_shell_command = data.is_shell_command;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                is_shell_command?: boolean;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.is_shell_command != null) {
                data.is_shell_command = this.is_shell_command;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.is_shell_command != false)
                writer.writeBool(2, this.is_shell_command);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        message.is_shell_command = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMessage {
            return ChatMessage.deserialize(bytes);
        }
    }
    export class ToolConfirmationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirmation_id?: string;
            selected_option?: ConfirmationOption.OptionType;
            modified_content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirmation_id" in data && data.confirmation_id != undefined) {
                    this.confirmation_id = data.confirmation_id;
                }
                if ("selected_option" in data && data.selected_option != undefined) {
                    this.selected_option = data.selected_option;
                }
                if ("modified_content" in data && data.modified_content != undefined) {
                    this.modified_content = data.modified_content;
                }
            }
        }
        get confirmation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set confirmation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get selected_option() {
            return pb_1.Message.getFieldWithDefault(this, 2, ConfirmationOption.OptionType.ALLOW_ONCE) as ConfirmationOption.OptionType;
        }
        set selected_option(value: ConfirmationOption.OptionType) {
            pb_1.Message.setField(this, 2, value);
        }
        get modified_content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set modified_content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            confirmation_id?: string;
            selected_option?: ConfirmationOption.OptionType;
            modified_content?: string;
        }): ToolConfirmationResponse {
            const message = new ToolConfirmationResponse({});
            if (data.confirmation_id != null) {
                message.confirmation_id = data.confirmation_id;
            }
            if (data.selected_option != null) {
                message.selected_option = data.selected_option;
            }
            if (data.modified_content != null) {
                message.modified_content = data.modified_content;
            }
            return message;
        }
        toObject() {
            const data: {
                confirmation_id?: string;
                selected_option?: ConfirmationOption.OptionType;
                modified_content?: string;
            } = {};
            if (this.confirmation_id != null) {
                data.confirmation_id = this.confirmation_id;
            }
            if (this.selected_option != null) {
                data.selected_option = this.selected_option;
            }
            if (this.modified_content != null) {
                data.modified_content = this.modified_content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.confirmation_id.length)
                writer.writeString(1, this.confirmation_id);
            if (this.selected_option != ConfirmationOption.OptionType.ALLOW_ONCE)
                writer.writeEnum(2, this.selected_option);
            if (this.modified_content.length)
                writer.writeString(3, this.modified_content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolConfirmationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolConfirmationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.confirmation_id = reader.readString();
                        break;
                    case 2:
                        message.selected_option = reader.readEnum();
                        break;
                    case 3:
                        message.modified_content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolConfirmationResponse {
            return ToolConfirmationResponse.deserialize(bytes);
        }
    }
    export class RefreshContextRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            force?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
            }
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            force?: boolean;
        }): RefreshContextRequest {
            const message = new RefreshContextRequest({});
            if (data.force != null) {
                message.force = data.force;
            }
            return message;
        }
        toObject() {
            const data: {
                force?: boolean;
            } = {};
            if (this.force != null) {
                data.force = this.force;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.force != false)
                writer.writeBool(1, this.force);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshContextRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshContextRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.force = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshContextRequest {
            return RefreshContextRequest.deserialize(bytes);
        }
    }
    export class CancelOperationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
            }
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            operation_id?: string;
        }): CancelOperationRequest {
            const message = new CancelOperationRequest({});
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_id?: string;
            } = {};
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_id.length)
                writer.writeString(1, this.operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOperationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOperationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOperationRequest {
            return CancelOperationRequest.deserialize(bytes);
        }
    }
    export class GetHelpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            command?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
            }
        }
        get command() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set command(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            command?: string;
        }): GetHelpRequest {
            const message = new GetHelpRequest({});
            if (data.command != null) {
                message.command = data.command;
            }
            return message;
        }
        toObject() {
            const data: {
                command?: string;
            } = {};
            if (this.command != null) {
                data.command = this.command;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.command.length)
                writer.writeString(1, this.command);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHelpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHelpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.command = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetHelpRequest {
            return GetHelpRequest.deserialize(bytes);
        }
    }
    export class AutoCompleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            input?: string;
            cursor_position?: number;
            context?: AutoCompleteContext;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("input" in data && data.input != undefined) {
                    this.input = data.input;
                }
                if ("cursor_position" in data && data.cursor_position != undefined) {
                    this.cursor_position = data.cursor_position;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get input() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set input(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cursor_position() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cursor_position(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getFieldWithDefault(this, 3, AutoCompleteContext.CONTEXT_CHAT_INPUT) as AutoCompleteContext;
        }
        set context(value: AutoCompleteContext) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            input?: string;
            cursor_position?: number;
            context?: AutoCompleteContext;
        }): AutoCompleteRequest {
            const message = new AutoCompleteRequest({});
            if (data.input != null) {
                message.input = data.input;
            }
            if (data.cursor_position != null) {
                message.cursor_position = data.cursor_position;
            }
            if (data.context != null) {
                message.context = data.context;
            }
            return message;
        }
        toObject() {
            const data: {
                input?: string;
                cursor_position?: number;
                context?: AutoCompleteContext;
            } = {};
            if (this.input != null) {
                data.input = this.input;
            }
            if (this.cursor_position != null) {
                data.cursor_position = this.cursor_position;
            }
            if (this.context != null) {
                data.context = this.context;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.input.length)
                writer.writeString(1, this.input);
            if (this.cursor_position != 0)
                writer.writeInt32(2, this.cursor_position);
            if (this.context != AutoCompleteContext.CONTEXT_CHAT_INPUT)
                writer.writeEnum(3, this.context);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoCompleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoCompleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.input = reader.readString();
                        break;
                    case 2:
                        message.cursor_position = reader.readInt32();
                        break;
                    case 3:
                        message.context = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoCompleteRequest {
            return AutoCompleteRequest.deserialize(bytes);
        }
    }
    export class ServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]];
        constructor(data?: any[] | ({} & (({
            session_started?: SessionStarted;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: SessionStats;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: ChatContent;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: ThoughtBubble;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: ToolConfirmationRequest;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: ToolStatusUpdate;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: ToolOutputStream;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: ErrorMessage;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: InfoMessage;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: WarningMessage;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: ProgressUpdate;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: ConfigChanged;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: HelpContent;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: AutoCompleteResult;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: FileEditPreview;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: FileOperationResult;
            context_summary?: never;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: ContextSummary;
            usage_metadata?: never;
        } | {
            session_started?: never;
            session_stats?: never;
            chat_content?: never;
            thought_bubble?: never;
            tool_confirmation?: never;
            tool_status?: never;
            tool_output?: never;
            error_message?: never;
            info_message?: never;
            warning_message?: never;
            progress_update?: never;
            config_changed?: never;
            help_content?: never;
            auto_complete_result?: never;
            file_edit_preview?: never;
            file_operation_result?: never;
            context_summary?: never;
            usage_metadata?: UsageMetadata;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_started" in data && data.session_started != undefined) {
                    this.session_started = data.session_started;
                }
                if ("session_stats" in data && data.session_stats != undefined) {
                    this.session_stats = data.session_stats;
                }
                if ("chat_content" in data && data.chat_content != undefined) {
                    this.chat_content = data.chat_content;
                }
                if ("thought_bubble" in data && data.thought_bubble != undefined) {
                    this.thought_bubble = data.thought_bubble;
                }
                if ("tool_confirmation" in data && data.tool_confirmation != undefined) {
                    this.tool_confirmation = data.tool_confirmation;
                }
                if ("tool_status" in data && data.tool_status != undefined) {
                    this.tool_status = data.tool_status;
                }
                if ("tool_output" in data && data.tool_output != undefined) {
                    this.tool_output = data.tool_output;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("info_message" in data && data.info_message != undefined) {
                    this.info_message = data.info_message;
                }
                if ("warning_message" in data && data.warning_message != undefined) {
                    this.warning_message = data.warning_message;
                }
                if ("progress_update" in data && data.progress_update != undefined) {
                    this.progress_update = data.progress_update;
                }
                if ("config_changed" in data && data.config_changed != undefined) {
                    this.config_changed = data.config_changed;
                }
                if ("help_content" in data && data.help_content != undefined) {
                    this.help_content = data.help_content;
                }
                if ("auto_complete_result" in data && data.auto_complete_result != undefined) {
                    this.auto_complete_result = data.auto_complete_result;
                }
                if ("file_edit_preview" in data && data.file_edit_preview != undefined) {
                    this.file_edit_preview = data.file_edit_preview;
                }
                if ("file_operation_result" in data && data.file_operation_result != undefined) {
                    this.file_operation_result = data.file_operation_result;
                }
                if ("context_summary" in data && data.context_summary != undefined) {
                    this.context_summary = data.context_summary;
                }
                if ("usage_metadata" in data && data.usage_metadata != undefined) {
                    this.usage_metadata = data.usage_metadata;
                }
            }
        }
        get session_started() {
            return pb_1.Message.getWrapperField(this, SessionStarted, 1) as SessionStarted;
        }
        set session_started(value: SessionStarted) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_session_started() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_stats() {
            return pb_1.Message.getWrapperField(this, SessionStats, 2) as SessionStats;
        }
        set session_stats(value: SessionStats) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_session_stats() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get chat_content() {
            return pb_1.Message.getWrapperField(this, ChatContent, 3) as ChatContent;
        }
        set chat_content(value: ChatContent) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_chat_content() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get thought_bubble() {
            return pb_1.Message.getWrapperField(this, ThoughtBubble, 4) as ThoughtBubble;
        }
        set thought_bubble(value: ThoughtBubble) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_thought_bubble() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get tool_confirmation() {
            return pb_1.Message.getWrapperField(this, ToolConfirmationRequest, 5) as ToolConfirmationRequest;
        }
        set tool_confirmation(value: ToolConfirmationRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_tool_confirmation() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get tool_status() {
            return pb_1.Message.getWrapperField(this, ToolStatusUpdate, 6) as ToolStatusUpdate;
        }
        set tool_status(value: ToolStatusUpdate) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_tool_status() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get tool_output() {
            return pb_1.Message.getWrapperField(this, ToolOutputStream, 7) as ToolOutputStream;
        }
        set tool_output(value: ToolOutputStream) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_tool_output() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get error_message() {
            return pb_1.Message.getWrapperField(this, ErrorMessage, 8) as ErrorMessage;
        }
        set error_message(value: ErrorMessage) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_error_message() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get info_message() {
            return pb_1.Message.getWrapperField(this, InfoMessage, 9) as InfoMessage;
        }
        set info_message(value: InfoMessage) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_info_message() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get warning_message() {
            return pb_1.Message.getWrapperField(this, WarningMessage, 10) as WarningMessage;
        }
        set warning_message(value: WarningMessage) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_warning_message() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get progress_update() {
            return pb_1.Message.getWrapperField(this, ProgressUpdate, 11) as ProgressUpdate;
        }
        set progress_update(value: ProgressUpdate) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_progress_update() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get config_changed() {
            return pb_1.Message.getWrapperField(this, ConfigChanged, 12) as ConfigChanged;
        }
        set config_changed(value: ConfigChanged) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_config_changed() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get help_content() {
            return pb_1.Message.getWrapperField(this, HelpContent, 13) as HelpContent;
        }
        set help_content(value: HelpContent) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_help_content() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get auto_complete_result() {
            return pb_1.Message.getWrapperField(this, AutoCompleteResult, 14) as AutoCompleteResult;
        }
        set auto_complete_result(value: AutoCompleteResult) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_auto_complete_result() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get file_edit_preview() {
            return pb_1.Message.getWrapperField(this, FileEditPreview, 15) as FileEditPreview;
        }
        set file_edit_preview(value: FileEditPreview) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_file_edit_preview() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get file_operation_result() {
            return pb_1.Message.getWrapperField(this, FileOperationResult, 16) as FileOperationResult;
        }
        set file_operation_result(value: FileOperationResult) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_file_operation_result() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get context_summary() {
            return pb_1.Message.getWrapperField(this, ContextSummary, 17) as ContextSummary;
        }
        set context_summary(value: ContextSummary) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_context_summary() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get usage_metadata() {
            return pb_1.Message.getWrapperField(this, UsageMetadata, 18) as UsageMetadata;
        }
        set usage_metadata(value: UsageMetadata) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_usage_metadata() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "session_started" | "session_stats" | "chat_content" | "thought_bubble" | "tool_confirmation" | "tool_status" | "tool_output" | "error_message" | "info_message" | "warning_message" | "progress_update" | "config_changed" | "help_content" | "auto_complete_result" | "file_edit_preview" | "file_operation_result" | "context_summary" | "usage_metadata";
            } = {
                0: "none",
                1: "session_started",
                2: "session_stats",
                3: "chat_content",
                4: "thought_bubble",
                5: "tool_confirmation",
                6: "tool_status",
                7: "tool_output",
                8: "error_message",
                9: "info_message",
                10: "warning_message",
                11: "progress_update",
                12: "config_changed",
                13: "help_content",
                14: "auto_complete_result",
                15: "file_edit_preview",
                16: "file_operation_result",
                17: "context_summary",
                18: "usage_metadata"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])];
        }
        static fromObject(data: {
            session_started?: ReturnType<typeof SessionStarted.prototype.toObject>;
            session_stats?: ReturnType<typeof SessionStats.prototype.toObject>;
            chat_content?: ReturnType<typeof ChatContent.prototype.toObject>;
            thought_bubble?: ReturnType<typeof ThoughtBubble.prototype.toObject>;
            tool_confirmation?: ReturnType<typeof ToolConfirmationRequest.prototype.toObject>;
            tool_status?: ReturnType<typeof ToolStatusUpdate.prototype.toObject>;
            tool_output?: ReturnType<typeof ToolOutputStream.prototype.toObject>;
            error_message?: ReturnType<typeof ErrorMessage.prototype.toObject>;
            info_message?: ReturnType<typeof InfoMessage.prototype.toObject>;
            warning_message?: ReturnType<typeof WarningMessage.prototype.toObject>;
            progress_update?: ReturnType<typeof ProgressUpdate.prototype.toObject>;
            config_changed?: ReturnType<typeof ConfigChanged.prototype.toObject>;
            help_content?: ReturnType<typeof HelpContent.prototype.toObject>;
            auto_complete_result?: ReturnType<typeof AutoCompleteResult.prototype.toObject>;
            file_edit_preview?: ReturnType<typeof FileEditPreview.prototype.toObject>;
            file_operation_result?: ReturnType<typeof FileOperationResult.prototype.toObject>;
            context_summary?: ReturnType<typeof ContextSummary.prototype.toObject>;
            usage_metadata?: ReturnType<typeof UsageMetadata.prototype.toObject>;
        }): ServerResponse {
            const message = new ServerResponse({});
            if (data.session_started != null) {
                message.session_started = SessionStarted.fromObject(data.session_started);
            }
            if (data.session_stats != null) {
                message.session_stats = SessionStats.fromObject(data.session_stats);
            }
            if (data.chat_content != null) {
                message.chat_content = ChatContent.fromObject(data.chat_content);
            }
            if (data.thought_bubble != null) {
                message.thought_bubble = ThoughtBubble.fromObject(data.thought_bubble);
            }
            if (data.tool_confirmation != null) {
                message.tool_confirmation = ToolConfirmationRequest.fromObject(data.tool_confirmation);
            }
            if (data.tool_status != null) {
                message.tool_status = ToolStatusUpdate.fromObject(data.tool_status);
            }
            if (data.tool_output != null) {
                message.tool_output = ToolOutputStream.fromObject(data.tool_output);
            }
            if (data.error_message != null) {
                message.error_message = ErrorMessage.fromObject(data.error_message);
            }
            if (data.info_message != null) {
                message.info_message = InfoMessage.fromObject(data.info_message);
            }
            if (data.warning_message != null) {
                message.warning_message = WarningMessage.fromObject(data.warning_message);
            }
            if (data.progress_update != null) {
                message.progress_update = ProgressUpdate.fromObject(data.progress_update);
            }
            if (data.config_changed != null) {
                message.config_changed = ConfigChanged.fromObject(data.config_changed);
            }
            if (data.help_content != null) {
                message.help_content = HelpContent.fromObject(data.help_content);
            }
            if (data.auto_complete_result != null) {
                message.auto_complete_result = AutoCompleteResult.fromObject(data.auto_complete_result);
            }
            if (data.file_edit_preview != null) {
                message.file_edit_preview = FileEditPreview.fromObject(data.file_edit_preview);
            }
            if (data.file_operation_result != null) {
                message.file_operation_result = FileOperationResult.fromObject(data.file_operation_result);
            }
            if (data.context_summary != null) {
                message.context_summary = ContextSummary.fromObject(data.context_summary);
            }
            if (data.usage_metadata != null) {
                message.usage_metadata = UsageMetadata.fromObject(data.usage_metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                session_started?: ReturnType<typeof SessionStarted.prototype.toObject>;
                session_stats?: ReturnType<typeof SessionStats.prototype.toObject>;
                chat_content?: ReturnType<typeof ChatContent.prototype.toObject>;
                thought_bubble?: ReturnType<typeof ThoughtBubble.prototype.toObject>;
                tool_confirmation?: ReturnType<typeof ToolConfirmationRequest.prototype.toObject>;
                tool_status?: ReturnType<typeof ToolStatusUpdate.prototype.toObject>;
                tool_output?: ReturnType<typeof ToolOutputStream.prototype.toObject>;
                error_message?: ReturnType<typeof ErrorMessage.prototype.toObject>;
                info_message?: ReturnType<typeof InfoMessage.prototype.toObject>;
                warning_message?: ReturnType<typeof WarningMessage.prototype.toObject>;
                progress_update?: ReturnType<typeof ProgressUpdate.prototype.toObject>;
                config_changed?: ReturnType<typeof ConfigChanged.prototype.toObject>;
                help_content?: ReturnType<typeof HelpContent.prototype.toObject>;
                auto_complete_result?: ReturnType<typeof AutoCompleteResult.prototype.toObject>;
                file_edit_preview?: ReturnType<typeof FileEditPreview.prototype.toObject>;
                file_operation_result?: ReturnType<typeof FileOperationResult.prototype.toObject>;
                context_summary?: ReturnType<typeof ContextSummary.prototype.toObject>;
                usage_metadata?: ReturnType<typeof UsageMetadata.prototype.toObject>;
            } = {};
            if (this.session_started != null) {
                data.session_started = this.session_started.toObject();
            }
            if (this.session_stats != null) {
                data.session_stats = this.session_stats.toObject();
            }
            if (this.chat_content != null) {
                data.chat_content = this.chat_content.toObject();
            }
            if (this.thought_bubble != null) {
                data.thought_bubble = this.thought_bubble.toObject();
            }
            if (this.tool_confirmation != null) {
                data.tool_confirmation = this.tool_confirmation.toObject();
            }
            if (this.tool_status != null) {
                data.tool_status = this.tool_status.toObject();
            }
            if (this.tool_output != null) {
                data.tool_output = this.tool_output.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message.toObject();
            }
            if (this.info_message != null) {
                data.info_message = this.info_message.toObject();
            }
            if (this.warning_message != null) {
                data.warning_message = this.warning_message.toObject();
            }
            if (this.progress_update != null) {
                data.progress_update = this.progress_update.toObject();
            }
            if (this.config_changed != null) {
                data.config_changed = this.config_changed.toObject();
            }
            if (this.help_content != null) {
                data.help_content = this.help_content.toObject();
            }
            if (this.auto_complete_result != null) {
                data.auto_complete_result = this.auto_complete_result.toObject();
            }
            if (this.file_edit_preview != null) {
                data.file_edit_preview = this.file_edit_preview.toObject();
            }
            if (this.file_operation_result != null) {
                data.file_operation_result = this.file_operation_result.toObject();
            }
            if (this.context_summary != null) {
                data.context_summary = this.context_summary.toObject();
            }
            if (this.usage_metadata != null) {
                data.usage_metadata = this.usage_metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session_started)
                writer.writeMessage(1, this.session_started, () => this.session_started.serialize(writer));
            if (this.has_session_stats)
                writer.writeMessage(2, this.session_stats, () => this.session_stats.serialize(writer));
            if (this.has_chat_content)
                writer.writeMessage(3, this.chat_content, () => this.chat_content.serialize(writer));
            if (this.has_thought_bubble)
                writer.writeMessage(4, this.thought_bubble, () => this.thought_bubble.serialize(writer));
            if (this.has_tool_confirmation)
                writer.writeMessage(5, this.tool_confirmation, () => this.tool_confirmation.serialize(writer));
            if (this.has_tool_status)
                writer.writeMessage(6, this.tool_status, () => this.tool_status.serialize(writer));
            if (this.has_tool_output)
                writer.writeMessage(7, this.tool_output, () => this.tool_output.serialize(writer));
            if (this.has_error_message)
                writer.writeMessage(8, this.error_message, () => this.error_message.serialize(writer));
            if (this.has_info_message)
                writer.writeMessage(9, this.info_message, () => this.info_message.serialize(writer));
            if (this.has_warning_message)
                writer.writeMessage(10, this.warning_message, () => this.warning_message.serialize(writer));
            if (this.has_progress_update)
                writer.writeMessage(11, this.progress_update, () => this.progress_update.serialize(writer));
            if (this.has_config_changed)
                writer.writeMessage(12, this.config_changed, () => this.config_changed.serialize(writer));
            if (this.has_help_content)
                writer.writeMessage(13, this.help_content, () => this.help_content.serialize(writer));
            if (this.has_auto_complete_result)
                writer.writeMessage(14, this.auto_complete_result, () => this.auto_complete_result.serialize(writer));
            if (this.has_file_edit_preview)
                writer.writeMessage(15, this.file_edit_preview, () => this.file_edit_preview.serialize(writer));
            if (this.has_file_operation_result)
                writer.writeMessage(16, this.file_operation_result, () => this.file_operation_result.serialize(writer));
            if (this.has_context_summary)
                writer.writeMessage(17, this.context_summary, () => this.context_summary.serialize(writer));
            if (this.has_usage_metadata)
                writer.writeMessage(18, this.usage_metadata, () => this.usage_metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session_started, () => message.session_started = SessionStarted.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.session_stats, () => message.session_stats = SessionStats.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.chat_content, () => message.chat_content = ChatContent.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.thought_bubble, () => message.thought_bubble = ThoughtBubble.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.tool_confirmation, () => message.tool_confirmation = ToolConfirmationRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.tool_status, () => message.tool_status = ToolStatusUpdate.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.tool_output, () => message.tool_output = ToolOutputStream.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.error_message, () => message.error_message = ErrorMessage.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.info_message, () => message.info_message = InfoMessage.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.warning_message, () => message.warning_message = WarningMessage.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.progress_update, () => message.progress_update = ProgressUpdate.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.config_changed, () => message.config_changed = ConfigChanged.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.help_content, () => message.help_content = HelpContent.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.auto_complete_result, () => message.auto_complete_result = AutoCompleteResult.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.file_edit_preview, () => message.file_edit_preview = FileEditPreview.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.file_operation_result, () => message.file_operation_result = FileOperationResult.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.context_summary, () => message.context_summary = ContextSummary.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.usage_metadata, () => message.usage_metadata = UsageMetadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerResponse {
            return ServerResponse.deserialize(bytes);
        }
    }
    export class McpServerConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            command?: string;
            args?: string[];
            env?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("env" in data && data.env != undefined) {
                    this.env = data.env;
                }
            }
            if (!this.env)
                this.env = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get command() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set command(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get args() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set args(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get env() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set env(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            name?: string;
            command?: string;
            args?: string[];
            env?: {
                [key: string]: string;
            };
        }): McpServerConfig {
            const message = new McpServerConfig({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.command != null) {
                message.command = data.command;
            }
            if (data.args != null) {
                message.args = data.args;
            }
            if (typeof data.env == "object") {
                message.env = new Map(Object.entries(data.env));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                command?: string;
                args?: string[];
                env?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.command != null) {
                data.command = this.command;
            }
            if (this.args != null) {
                data.args = this.args;
            }
            if (this.env != null) {
                data.env = (Object.fromEntries)(this.env);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.command.length)
                writer.writeString(2, this.command);
            if (this.args.length)
                writer.writeRepeatedString(3, this.args);
            for (const [key, value] of this.env) {
                writer.writeMessage(4, this.env, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): McpServerConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new McpServerConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.command = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.env as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): McpServerConfig {
            return McpServerConfig.deserialize(bytes);
        }
    }
    export class SessionStarted extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            model?: string;
            initial_context?: ContextSummary;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("initial_context" in data && data.initial_context != undefined) {
                    this.initial_context = data.initial_context;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get initial_context() {
            return pb_1.Message.getWrapperField(this, ContextSummary, 3) as ContextSummary;
        }
        set initial_context(value: ContextSummary) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_initial_context() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            model?: string;
            initial_context?: ReturnType<typeof ContextSummary.prototype.toObject>;
        }): SessionStarted {
            const message = new SessionStarted({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.initial_context != null) {
                message.initial_context = ContextSummary.fromObject(data.initial_context);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                model?: string;
                initial_context?: ReturnType<typeof ContextSummary.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.initial_context != null) {
                data.initial_context = this.initial_context.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.model.length)
                writer.writeString(2, this.model);
            if (this.has_initial_context)
                writer.writeMessage(3, this.initial_context, () => this.initial_context.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStarted {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStarted();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.initial_context, () => message.initial_context = ContextSummary.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStarted {
            return SessionStarted.deserialize(bytes);
        }
    }
    export class SessionInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_id?: string;
        }): SessionInfoRequest {
            const message = new SessionInfoRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionInfoRequest {
            return SessionInfoRequest.deserialize(bytes);
        }
    }
    export class SessionInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            model?: string;
            turn_count?: number;
            created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("turn_count" in data && data.turn_count != undefined) {
                    this.turn_count = data.turn_count;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get turn_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set turn_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: string;
            model?: string;
            turn_count?: number;
            created_at?: number;
        }): SessionInfoResponse {
            const message = new SessionInfoResponse({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.turn_count != null) {
                message.turn_count = data.turn_count;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                model?: string;
                turn_count?: number;
                created_at?: number;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.turn_count != null) {
                data.turn_count = this.turn_count;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.model.length)
                writer.writeString(2, this.model);
            if (this.turn_count != 0)
                writer.writeInt32(3, this.turn_count);
            if (this.created_at != 0)
                writer.writeInt64(4, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    case 3:
                        message.turn_count = reader.readInt32();
                        break;
                    case 4:
                        message.created_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionInfoResponse {
            return SessionInfoResponse.deserialize(bytes);
        }
    }
    export class SessionStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_id?: string;
        }): SessionStatsRequest {
            const message = new SessionStatsRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStatsRequest {
            return SessionStatsRequest.deserialize(bytes);
        }
    }
    export class SessionStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stats?: SessionStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
            }
        }
        get stats() {
            return pb_1.Message.getWrapperField(this, SessionStats, 1) as SessionStats;
        }
        set stats(value: SessionStats) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stats() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stats?: ReturnType<typeof SessionStats.prototype.toObject>;
        }): SessionStatsResponse {
            const message = new SessionStatsResponse({});
            if (data.stats != null) {
                message.stats = SessionStats.fromObject(data.stats);
            }
            return message;
        }
        toObject() {
            const data: {
                stats?: ReturnType<typeof SessionStats.prototype.toObject>;
            } = {};
            if (this.stats != null) {
                data.stats = this.stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stats)
                writer.writeMessage(1, this.stats, () => this.stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stats, () => message.stats = SessionStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStatsResponse {
            return SessionStatsResponse.deserialize(bytes);
        }
    }
    export class SessionStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            turn_count?: number;
            total_tokens?: TokenUsage;
            total_api_time_ms?: number;
            tools_executed?: number;
            files_modified?: number;
            session_duration?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("turn_count" in data && data.turn_count != undefined) {
                    this.turn_count = data.turn_count;
                }
                if ("total_tokens" in data && data.total_tokens != undefined) {
                    this.total_tokens = data.total_tokens;
                }
                if ("total_api_time_ms" in data && data.total_api_time_ms != undefined) {
                    this.total_api_time_ms = data.total_api_time_ms;
                }
                if ("tools_executed" in data && data.tools_executed != undefined) {
                    this.tools_executed = data.tools_executed;
                }
                if ("files_modified" in data && data.files_modified != undefined) {
                    this.files_modified = data.files_modified;
                }
                if ("session_duration" in data && data.session_duration != undefined) {
                    this.session_duration = data.session_duration;
                }
            }
        }
        get turn_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set turn_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get total_tokens() {
            return pb_1.Message.getWrapperField(this, TokenUsage, 2) as TokenUsage;
        }
        set total_tokens(value: TokenUsage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_total_tokens() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total_api_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_api_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get tools_executed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set tools_executed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get files_modified() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set files_modified(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get session_duration() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set session_duration(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            turn_count?: number;
            total_tokens?: ReturnType<typeof TokenUsage.prototype.toObject>;
            total_api_time_ms?: number;
            tools_executed?: number;
            files_modified?: number;
            session_duration?: string;
        }): SessionStats {
            const message = new SessionStats({});
            if (data.turn_count != null) {
                message.turn_count = data.turn_count;
            }
            if (data.total_tokens != null) {
                message.total_tokens = TokenUsage.fromObject(data.total_tokens);
            }
            if (data.total_api_time_ms != null) {
                message.total_api_time_ms = data.total_api_time_ms;
            }
            if (data.tools_executed != null) {
                message.tools_executed = data.tools_executed;
            }
            if (data.files_modified != null) {
                message.files_modified = data.files_modified;
            }
            if (data.session_duration != null) {
                message.session_duration = data.session_duration;
            }
            return message;
        }
        toObject() {
            const data: {
                turn_count?: number;
                total_tokens?: ReturnType<typeof TokenUsage.prototype.toObject>;
                total_api_time_ms?: number;
                tools_executed?: number;
                files_modified?: number;
                session_duration?: string;
            } = {};
            if (this.turn_count != null) {
                data.turn_count = this.turn_count;
            }
            if (this.total_tokens != null) {
                data.total_tokens = this.total_tokens.toObject();
            }
            if (this.total_api_time_ms != null) {
                data.total_api_time_ms = this.total_api_time_ms;
            }
            if (this.tools_executed != null) {
                data.tools_executed = this.tools_executed;
            }
            if (this.files_modified != null) {
                data.files_modified = this.files_modified;
            }
            if (this.session_duration != null) {
                data.session_duration = this.session_duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.turn_count != 0)
                writer.writeInt32(1, this.turn_count);
            if (this.has_total_tokens)
                writer.writeMessage(2, this.total_tokens, () => this.total_tokens.serialize(writer));
            if (this.total_api_time_ms != 0)
                writer.writeInt64(3, this.total_api_time_ms);
            if (this.tools_executed != 0)
                writer.writeInt32(4, this.tools_executed);
            if (this.files_modified != 0)
                writer.writeInt32(5, this.files_modified);
            if (this.session_duration.length)
                writer.writeString(6, this.session_duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.turn_count = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.total_tokens, () => message.total_tokens = TokenUsage.deserialize(reader));
                        break;
                    case 3:
                        message.total_api_time_ms = reader.readInt64();
                        break;
                    case 4:
                        message.tools_executed = reader.readInt32();
                        break;
                    case 5:
                        message.files_modified = reader.readInt32();
                        break;
                    case 6:
                        message.session_duration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionStats {
            return SessionStats.deserialize(bytes);
        }
    }
    export class TokenUsage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            input_tokens?: number;
            output_tokens?: number;
            cached_tokens?: number;
            reasoning_tokens?: number;
            total_tokens?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("input_tokens" in data && data.input_tokens != undefined) {
                    this.input_tokens = data.input_tokens;
                }
                if ("output_tokens" in data && data.output_tokens != undefined) {
                    this.output_tokens = data.output_tokens;
                }
                if ("cached_tokens" in data && data.cached_tokens != undefined) {
                    this.cached_tokens = data.cached_tokens;
                }
                if ("reasoning_tokens" in data && data.reasoning_tokens != undefined) {
                    this.reasoning_tokens = data.reasoning_tokens;
                }
                if ("total_tokens" in data && data.total_tokens != undefined) {
                    this.total_tokens = data.total_tokens;
                }
            }
        }
        get input_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set input_tokens(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get output_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set output_tokens(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get cached_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set cached_tokens(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get reasoning_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set reasoning_tokens(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_tokens(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            input_tokens?: number;
            output_tokens?: number;
            cached_tokens?: number;
            reasoning_tokens?: number;
            total_tokens?: number;
        }): TokenUsage {
            const message = new TokenUsage({});
            if (data.input_tokens != null) {
                message.input_tokens = data.input_tokens;
            }
            if (data.output_tokens != null) {
                message.output_tokens = data.output_tokens;
            }
            if (data.cached_tokens != null) {
                message.cached_tokens = data.cached_tokens;
            }
            if (data.reasoning_tokens != null) {
                message.reasoning_tokens = data.reasoning_tokens;
            }
            if (data.total_tokens != null) {
                message.total_tokens = data.total_tokens;
            }
            return message;
        }
        toObject() {
            const data: {
                input_tokens?: number;
                output_tokens?: number;
                cached_tokens?: number;
                reasoning_tokens?: number;
                total_tokens?: number;
            } = {};
            if (this.input_tokens != null) {
                data.input_tokens = this.input_tokens;
            }
            if (this.output_tokens != null) {
                data.output_tokens = this.output_tokens;
            }
            if (this.cached_tokens != null) {
                data.cached_tokens = this.cached_tokens;
            }
            if (this.reasoning_tokens != null) {
                data.reasoning_tokens = this.reasoning_tokens;
            }
            if (this.total_tokens != null) {
                data.total_tokens = this.total_tokens;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.input_tokens != 0)
                writer.writeInt32(1, this.input_tokens);
            if (this.output_tokens != 0)
                writer.writeInt32(2, this.output_tokens);
            if (this.cached_tokens != 0)
                writer.writeInt32(3, this.cached_tokens);
            if (this.reasoning_tokens != 0)
                writer.writeInt32(4, this.reasoning_tokens);
            if (this.total_tokens != 0)
                writer.writeInt32(5, this.total_tokens);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenUsage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenUsage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.input_tokens = reader.readInt32();
                        break;
                    case 2:
                        message.output_tokens = reader.readInt32();
                        break;
                    case 3:
                        message.cached_tokens = reader.readInt32();
                        break;
                    case 4:
                        message.reasoning_tokens = reader.readInt32();
                        break;
                    case 5:
                        message.total_tokens = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenUsage {
            return TokenUsage.deserialize(bytes);
        }
    }
    export class ChatContent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: ChatContent.ContentType;
            content?: string;
            is_markdown?: boolean;
            is_streaming?: boolean;
            code_block?: CodeBlock;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("is_markdown" in data && data.is_markdown != undefined) {
                    this.is_markdown = data.is_markdown;
                }
                if ("is_streaming" in data && data.is_streaming != undefined) {
                    this.is_streaming = data.is_streaming;
                }
                if ("code_block" in data && data.code_block != undefined) {
                    this.code_block = data.code_block;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ChatContent.ContentType.USER) as ChatContent.ContentType;
        }
        set type(value: ChatContent.ContentType) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_markdown() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_markdown(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_streaming() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_streaming(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get code_block() {
            return pb_1.Message.getWrapperField(this, CodeBlock, 5) as CodeBlock;
        }
        set code_block(value: CodeBlock) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_code_block() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            type?: ChatContent.ContentType;
            content?: string;
            is_markdown?: boolean;
            is_streaming?: boolean;
            code_block?: ReturnType<typeof CodeBlock.prototype.toObject>;
        }): ChatContent {
            const message = new ChatContent({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.is_markdown != null) {
                message.is_markdown = data.is_markdown;
            }
            if (data.is_streaming != null) {
                message.is_streaming = data.is_streaming;
            }
            if (data.code_block != null) {
                message.code_block = CodeBlock.fromObject(data.code_block);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: ChatContent.ContentType;
                content?: string;
                is_markdown?: boolean;
                is_streaming?: boolean;
                code_block?: ReturnType<typeof CodeBlock.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.is_markdown != null) {
                data.is_markdown = this.is_markdown;
            }
            if (this.is_streaming != null) {
                data.is_streaming = this.is_streaming;
            }
            if (this.code_block != null) {
                data.code_block = this.code_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != ChatContent.ContentType.USER)
                writer.writeEnum(1, this.type);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.is_markdown != false)
                writer.writeBool(3, this.is_markdown);
            if (this.is_streaming != false)
                writer.writeBool(4, this.is_streaming);
            if (this.has_code_block)
                writer.writeMessage(5, this.code_block, () => this.code_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatContent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatContent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.is_markdown = reader.readBool();
                        break;
                    case 4:
                        message.is_streaming = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.code_block, () => message.code_block = CodeBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatContent {
            return ChatContent.deserialize(bytes);
        }
    }
    export namespace ChatContent {
        export enum ContentType {
            USER = 0,
            GEMINI = 1,
            ERROR = 2,
            INFO = 3,
            TOOL = 4,
            THOUGHT = 5
        }
    }
    export class CodeBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            language?: string;
            code?: string;
            should_highlight?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("should_highlight" in data && data.should_highlight != undefined) {
                    this.should_highlight = data.should_highlight;
                }
            }
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get should_highlight() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set should_highlight(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            language?: string;
            code?: string;
            should_highlight?: boolean;
        }): CodeBlock {
            const message = new CodeBlock({});
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.should_highlight != null) {
                message.should_highlight = data.should_highlight;
            }
            return message;
        }
        toObject() {
            const data: {
                language?: string;
                code?: string;
                should_highlight?: boolean;
            } = {};
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.should_highlight != null) {
                data.should_highlight = this.should_highlight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.language.length)
                writer.writeString(1, this.language);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.should_highlight != false)
                writer.writeBool(3, this.should_highlight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodeBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodeBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.language = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.should_highlight = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CodeBlock {
            return CodeBlock.deserialize(bytes);
        }
    }
    export class ThoughtBubble extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subject?: string;
            thought?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("thought" in data && data.thought != undefined) {
                    this.thought = data.thought;
                }
            }
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get thought() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set thought(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            subject?: string;
            thought?: string;
        }): ThoughtBubble {
            const message = new ThoughtBubble({});
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.thought != null) {
                message.thought = data.thought;
            }
            return message;
        }
        toObject() {
            const data: {
                subject?: string;
                thought?: string;
            } = {};
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.thought != null) {
                data.thought = this.thought;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subject.length)
                writer.writeString(1, this.subject);
            if (this.thought.length)
                writer.writeString(2, this.thought);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThoughtBubble {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThoughtBubble();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subject = reader.readString();
                        break;
                    case 2:
                        message.thought = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ThoughtBubble {
            return ThoughtBubble.deserialize(bytes);
        }
    }
    export class ToolConfirmationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirmation_id?: string;
            tool_name?: string;
            args?: dependency_1.google.protobuf.Struct;
            type?: ToolConfirmationRequest.ConfirmationType;
            options?: ConfirmationOption[];
            description?: string;
            diff_preview?: DiffPreview;
            mcp_server?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirmation_id" in data && data.confirmation_id != undefined) {
                    this.confirmation_id = data.confirmation_id;
                }
                if ("tool_name" in data && data.tool_name != undefined) {
                    this.tool_name = data.tool_name;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("diff_preview" in data && data.diff_preview != undefined) {
                    this.diff_preview = data.diff_preview;
                }
                if ("mcp_server" in data && data.mcp_server != undefined) {
                    this.mcp_server = data.mcp_server;
                }
            }
        }
        get confirmation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set confirmation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tool_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tool_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get args() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 3) as dependency_1.google.protobuf.Struct;
        }
        set args(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_args() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, ToolConfirmationRequest.ConfirmationType.EXECUTE) as ToolConfirmationRequest.ConfirmationType;
        }
        set type(value: ToolConfirmationRequest.ConfirmationType) {
            pb_1.Message.setField(this, 4, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, ConfirmationOption, 5) as ConfirmationOption[];
        }
        set options(value: ConfirmationOption[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get diff_preview() {
            return pb_1.Message.getWrapperField(this, DiffPreview, 7) as DiffPreview;
        }
        set diff_preview(value: DiffPreview) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_diff_preview() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get mcp_server() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set mcp_server(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            confirmation_id?: string;
            tool_name?: string;
            args?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            type?: ToolConfirmationRequest.ConfirmationType;
            options?: ReturnType<typeof ConfirmationOption.prototype.toObject>[];
            description?: string;
            diff_preview?: ReturnType<typeof DiffPreview.prototype.toObject>;
            mcp_server?: string;
        }): ToolConfirmationRequest {
            const message = new ToolConfirmationRequest({});
            if (data.confirmation_id != null) {
                message.confirmation_id = data.confirmation_id;
            }
            if (data.tool_name != null) {
                message.tool_name = data.tool_name;
            }
            if (data.args != null) {
                message.args = dependency_1.google.protobuf.Struct.fromObject(data.args);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.options != null) {
                message.options = data.options.map(item => ConfirmationOption.fromObject(item));
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.diff_preview != null) {
                message.diff_preview = DiffPreview.fromObject(data.diff_preview);
            }
            if (data.mcp_server != null) {
                message.mcp_server = data.mcp_server;
            }
            return message;
        }
        toObject() {
            const data: {
                confirmation_id?: string;
                tool_name?: string;
                args?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                type?: ToolConfirmationRequest.ConfirmationType;
                options?: ReturnType<typeof ConfirmationOption.prototype.toObject>[];
                description?: string;
                diff_preview?: ReturnType<typeof DiffPreview.prototype.toObject>;
                mcp_server?: string;
            } = {};
            if (this.confirmation_id != null) {
                data.confirmation_id = this.confirmation_id;
            }
            if (this.tool_name != null) {
                data.tool_name = this.tool_name;
            }
            if (this.args != null) {
                data.args = this.args.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.options != null) {
                data.options = this.options.map((item: ConfirmationOption) => item.toObject());
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.diff_preview != null) {
                data.diff_preview = this.diff_preview.toObject();
            }
            if (this.mcp_server != null) {
                data.mcp_server = this.mcp_server;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.confirmation_id.length)
                writer.writeString(1, this.confirmation_id);
            if (this.tool_name.length)
                writer.writeString(2, this.tool_name);
            if (this.has_args)
                writer.writeMessage(3, this.args, () => this.args.serialize(writer));
            if (this.type != ToolConfirmationRequest.ConfirmationType.EXECUTE)
                writer.writeEnum(4, this.type);
            if (this.options.length)
                writer.writeRepeatedMessage(5, this.options, (item: ConfirmationOption) => item.serialize(writer));
            if (this.description.length)
                writer.writeString(6, this.description);
            if (this.has_diff_preview)
                writer.writeMessage(7, this.diff_preview, () => this.diff_preview.serialize(writer));
            if (this.mcp_server.length)
                writer.writeString(8, this.mcp_server);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolConfirmationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolConfirmationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.confirmation_id = reader.readString();
                        break;
                    case 2:
                        message.tool_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.args, () => message.args = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        message.type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ConfirmationOption.deserialize(reader), ConfirmationOption));
                        break;
                    case 6:
                        message.description = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.diff_preview, () => message.diff_preview = DiffPreview.deserialize(reader));
                        break;
                    case 8:
                        message.mcp_server = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolConfirmationRequest {
            return ToolConfirmationRequest.deserialize(bytes);
        }
    }
    export namespace ToolConfirmationRequest {
        export enum ConfirmationType {
            EXECUTE = 0,
            EDIT_FILE = 1,
            SHELL_COMMAND = 2,
            MCP_TOOL = 3
        }
    }
    export class ConfirmationOption extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: ConfirmationOption.OptionType;
            label?: string;
            hotkey?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("hotkey" in data && data.hotkey != undefined) {
                    this.hotkey = data.hotkey;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ConfirmationOption.OptionType.ALLOW_ONCE) as ConfirmationOption.OptionType;
        }
        set type(value: ConfirmationOption.OptionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hotkey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hotkey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: ConfirmationOption.OptionType;
            label?: string;
            hotkey?: string;
        }): ConfirmationOption {
            const message = new ConfirmationOption({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.hotkey != null) {
                message.hotkey = data.hotkey;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: ConfirmationOption.OptionType;
                label?: string;
                hotkey?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.hotkey != null) {
                data.hotkey = this.hotkey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != ConfirmationOption.OptionType.ALLOW_ONCE)
                writer.writeEnum(1, this.type);
            if (this.label.length)
                writer.writeString(2, this.label);
            if (this.hotkey.length)
                writer.writeString(3, this.hotkey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfirmationOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfirmationOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.label = reader.readString();
                        break;
                    case 3:
                        message.hotkey = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfirmationOption {
            return ConfirmationOption.deserialize(bytes);
        }
    }
    export namespace ConfirmationOption {
        export enum OptionType {
            ALLOW_ONCE = 0,
            ALLOW_ALWAYS = 1,
            ALLOW_ALWAYS_TOOL = 2,
            ALLOW_ALWAYS_SERVER = 3,
            MODIFY_WITH_EDITOR = 4,
            CANCEL = 5
        }
    }
    export class DiffPreview extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_path?: string;
            hunks?: DiffHunk[];
            additions?: number;
            deletions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("hunks" in data && data.hunks != undefined) {
                    this.hunks = data.hunks;
                }
                if ("additions" in data && data.additions != undefined) {
                    this.additions = data.additions;
                }
                if ("deletions" in data && data.deletions != undefined) {
                    this.deletions = data.deletions;
                }
            }
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get hunks() {
            return pb_1.Message.getRepeatedWrapperField(this, DiffHunk, 2) as DiffHunk[];
        }
        set hunks(value: DiffHunk[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get additions() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set additions(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get deletions() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set deletions(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            file_path?: string;
            hunks?: ReturnType<typeof DiffHunk.prototype.toObject>[];
            additions?: number;
            deletions?: number;
        }): DiffPreview {
            const message = new DiffPreview({});
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.hunks != null) {
                message.hunks = data.hunks.map(item => DiffHunk.fromObject(item));
            }
            if (data.additions != null) {
                message.additions = data.additions;
            }
            if (data.deletions != null) {
                message.deletions = data.deletions;
            }
            return message;
        }
        toObject() {
            const data: {
                file_path?: string;
                hunks?: ReturnType<typeof DiffHunk.prototype.toObject>[];
                additions?: number;
                deletions?: number;
            } = {};
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.hunks != null) {
                data.hunks = this.hunks.map((item: DiffHunk) => item.toObject());
            }
            if (this.additions != null) {
                data.additions = this.additions;
            }
            if (this.deletions != null) {
                data.deletions = this.deletions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_path.length)
                writer.writeString(1, this.file_path);
            if (this.hunks.length)
                writer.writeRepeatedMessage(2, this.hunks, (item: DiffHunk) => item.serialize(writer));
            if (this.additions != 0)
                writer.writeInt32(3, this.additions);
            if (this.deletions != 0)
                writer.writeInt32(4, this.deletions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffPreview {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffPreview();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.hunks, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DiffHunk.deserialize(reader), DiffHunk));
                        break;
                    case 3:
                        message.additions = reader.readInt32();
                        break;
                    case 4:
                        message.deletions = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffPreview {
            return DiffPreview.deserialize(bytes);
        }
    }
    export class DiffHunk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_start?: number;
            old_count?: number;
            new_start?: number;
            new_count?: number;
            lines?: DiffLine[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_start" in data && data.old_start != undefined) {
                    this.old_start = data.old_start;
                }
                if ("old_count" in data && data.old_count != undefined) {
                    this.old_count = data.old_count;
                }
                if ("new_start" in data && data.new_start != undefined) {
                    this.new_start = data.new_start;
                }
                if ("new_count" in data && data.new_count != undefined) {
                    this.new_count = data.new_count;
                }
                if ("lines" in data && data.lines != undefined) {
                    this.lines = data.lines;
                }
            }
        }
        get old_start() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set old_start(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set old_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_start() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set new_start(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set new_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get lines() {
            return pb_1.Message.getRepeatedWrapperField(this, DiffLine, 5) as DiffLine[];
        }
        set lines(value: DiffLine[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            old_start?: number;
            old_count?: number;
            new_start?: number;
            new_count?: number;
            lines?: ReturnType<typeof DiffLine.prototype.toObject>[];
        }): DiffHunk {
            const message = new DiffHunk({});
            if (data.old_start != null) {
                message.old_start = data.old_start;
            }
            if (data.old_count != null) {
                message.old_count = data.old_count;
            }
            if (data.new_start != null) {
                message.new_start = data.new_start;
            }
            if (data.new_count != null) {
                message.new_count = data.new_count;
            }
            if (data.lines != null) {
                message.lines = data.lines.map(item => DiffLine.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                old_start?: number;
                old_count?: number;
                new_start?: number;
                new_count?: number;
                lines?: ReturnType<typeof DiffLine.prototype.toObject>[];
            } = {};
            if (this.old_start != null) {
                data.old_start = this.old_start;
            }
            if (this.old_count != null) {
                data.old_count = this.old_count;
            }
            if (this.new_start != null) {
                data.new_start = this.new_start;
            }
            if (this.new_count != null) {
                data.new_count = this.new_count;
            }
            if (this.lines != null) {
                data.lines = this.lines.map((item: DiffLine) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_start != 0)
                writer.writeInt32(1, this.old_start);
            if (this.old_count != 0)
                writer.writeInt32(2, this.old_count);
            if (this.new_start != 0)
                writer.writeInt32(3, this.new_start);
            if (this.new_count != 0)
                writer.writeInt32(4, this.new_count);
            if (this.lines.length)
                writer.writeRepeatedMessage(5, this.lines, (item: DiffLine) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffHunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffHunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_start = reader.readInt32();
                        break;
                    case 2:
                        message.old_count = reader.readInt32();
                        break;
                    case 3:
                        message.new_start = reader.readInt32();
                        break;
                    case 4:
                        message.new_count = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.lines, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DiffLine.deserialize(reader), DiffLine));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffHunk {
            return DiffHunk.deserialize(bytes);
        }
    }
    export class DiffLine extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: DiffLine.LineType;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, DiffLine.LineType.CONTEXT) as DiffLine.LineType;
        }
        set type(value: DiffLine.LineType) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: DiffLine.LineType;
            content?: string;
        }): DiffLine {
            const message = new DiffLine({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: DiffLine.LineType;
                content?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != DiffLine.LineType.CONTEXT)
                writer.writeEnum(1, this.type);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffLine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffLine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffLine {
            return DiffLine.deserialize(bytes);
        }
    }
    export namespace DiffLine {
        export enum LineType {
            CONTEXT = 0,
            ADDITION = 1,
            DELETION = 2
        }
    }
    export class ToolStatusUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tool_id?: string;
            tool_name?: string;
            status?: ToolStatusUpdate.Status;
            description?: string;
            result?: dependency_1.google.protobuf.Struct;
            error_message?: string;
            duration_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tool_id" in data && data.tool_id != undefined) {
                    this.tool_id = data.tool_id;
                }
                if ("tool_name" in data && data.tool_name != undefined) {
                    this.tool_name = data.tool_name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("duration_ms" in data && data.duration_ms != undefined) {
                    this.duration_ms = data.duration_ms;
                }
            }
        }
        get tool_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tool_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tool_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tool_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, ToolStatusUpdate.Status.PENDING) as ToolStatusUpdate.Status;
        }
        set status(value: ToolStatusUpdate.Status) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 5) as dependency_1.google.protobuf.Struct;
        }
        set result(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set duration_ms(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            tool_id?: string;
            tool_name?: string;
            status?: ToolStatusUpdate.Status;
            description?: string;
            result?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            error_message?: string;
            duration_ms?: number;
        }): ToolStatusUpdate {
            const message = new ToolStatusUpdate({});
            if (data.tool_id != null) {
                message.tool_id = data.tool_id;
            }
            if (data.tool_name != null) {
                message.tool_name = data.tool_name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.result != null) {
                message.result = dependency_1.google.protobuf.Struct.fromObject(data.result);
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.duration_ms != null) {
                message.duration_ms = data.duration_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                tool_id?: string;
                tool_name?: string;
                status?: ToolStatusUpdate.Status;
                description?: string;
                result?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                error_message?: string;
                duration_ms?: number;
            } = {};
            if (this.tool_id != null) {
                data.tool_id = this.tool_id;
            }
            if (this.tool_name != null) {
                data.tool_name = this.tool_name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.duration_ms != null) {
                data.duration_ms = this.duration_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tool_id.length)
                writer.writeString(1, this.tool_id);
            if (this.tool_name.length)
                writer.writeString(2, this.tool_name);
            if (this.status != ToolStatusUpdate.Status.PENDING)
                writer.writeEnum(3, this.status);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.has_result)
                writer.writeMessage(5, this.result, () => this.result.serialize(writer));
            if (this.error_message.length)
                writer.writeString(6, this.error_message);
            if (this.duration_ms != 0)
                writer.writeInt64(7, this.duration_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolStatusUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolStatusUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tool_id = reader.readString();
                        break;
                    case 2:
                        message.tool_name = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 6:
                        message.error_message = reader.readString();
                        break;
                    case 7:
                        message.duration_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolStatusUpdate {
            return ToolStatusUpdate.deserialize(bytes);
        }
    }
    export namespace ToolStatusUpdate {
        export enum Status {
            PENDING = 0,
            VALIDATING = 1,
            SCHEDULED = 2,
            AWAITING_CONFIRMATION = 3,
            EXECUTING = 4,
            SUCCESS = 5,
            ERROR = 6,
            CANCELLED = 7
        }
    }
    export class ToolOutputStream extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tool_id?: string;
            tool_name?: string;
            output?: string;
            is_error?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tool_id" in data && data.tool_id != undefined) {
                    this.tool_id = data.tool_id;
                }
                if ("tool_name" in data && data.tool_name != undefined) {
                    this.tool_name = data.tool_name;
                }
                if ("output" in data && data.output != undefined) {
                    this.output = data.output;
                }
                if ("is_error" in data && data.is_error != undefined) {
                    this.is_error = data.is_error;
                }
            }
        }
        get tool_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tool_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tool_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tool_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get output() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set output(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_error() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_error(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tool_id?: string;
            tool_name?: string;
            output?: string;
            is_error?: boolean;
        }): ToolOutputStream {
            const message = new ToolOutputStream({});
            if (data.tool_id != null) {
                message.tool_id = data.tool_id;
            }
            if (data.tool_name != null) {
                message.tool_name = data.tool_name;
            }
            if (data.output != null) {
                message.output = data.output;
            }
            if (data.is_error != null) {
                message.is_error = data.is_error;
            }
            return message;
        }
        toObject() {
            const data: {
                tool_id?: string;
                tool_name?: string;
                output?: string;
                is_error?: boolean;
            } = {};
            if (this.tool_id != null) {
                data.tool_id = this.tool_id;
            }
            if (this.tool_name != null) {
                data.tool_name = this.tool_name;
            }
            if (this.output != null) {
                data.output = this.output;
            }
            if (this.is_error != null) {
                data.is_error = this.is_error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tool_id.length)
                writer.writeString(1, this.tool_id);
            if (this.tool_name.length)
                writer.writeString(2, this.tool_name);
            if (this.output.length)
                writer.writeString(3, this.output);
            if (this.is_error != false)
                writer.writeBool(4, this.is_error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolOutputStream {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolOutputStream();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tool_id = reader.readString();
                        break;
                    case 2:
                        message.tool_name = reader.readString();
                        break;
                    case 3:
                        message.output = reader.readString();
                        break;
                    case 4:
                        message.is_error = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolOutputStream {
            return ToolOutputStream.deserialize(bytes);
        }
    }
    export class ErrorMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            details?: string;
            stack_trace?: string;
            code?: number;
            is_retryable?: boolean;
            suggestions?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
                if ("stack_trace" in data && data.stack_trace != undefined) {
                    this.stack_trace = data.stack_trace;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("is_retryable" in data && data.is_retryable != undefined) {
                    this.is_retryable = data.is_retryable;
                }
                if ("suggestions" in data && data.suggestions != undefined) {
                    this.suggestions = data.suggestions;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stack_trace() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set stack_trace(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_retryable() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_retryable(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get suggestions() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set suggestions(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            message?: string;
            details?: string;
            stack_trace?: string;
            code?: number;
            is_retryable?: boolean;
            suggestions?: string[];
        }): ErrorMessage {
            const message = new ErrorMessage({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            if (data.stack_trace != null) {
                message.stack_trace = data.stack_trace;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.is_retryable != null) {
                message.is_retryable = data.is_retryable;
            }
            if (data.suggestions != null) {
                message.suggestions = data.suggestions;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                details?: string;
                stack_trace?: string;
                code?: number;
                is_retryable?: boolean;
                suggestions?: string[];
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            if (this.stack_trace != null) {
                data.stack_trace = this.stack_trace;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.is_retryable != null) {
                data.is_retryable = this.is_retryable;
            }
            if (this.suggestions != null) {
                data.suggestions = this.suggestions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.details.length)
                writer.writeString(2, this.details);
            if (this.stack_trace.length)
                writer.writeString(3, this.stack_trace);
            if (this.code != 0)
                writer.writeInt32(4, this.code);
            if (this.is_retryable != false)
                writer.writeBool(5, this.is_retryable);
            if (this.suggestions.length)
                writer.writeRepeatedString(6, this.suggestions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.details = reader.readString();
                        break;
                    case 3:
                        message.stack_trace = reader.readString();
                        break;
                    case 4:
                        message.code = reader.readInt32();
                        break;
                    case 5:
                        message.is_retryable = reader.readBool();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorMessage {
            return ErrorMessage.deserialize(bytes);
        }
    }
    export class InfoMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            details?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            details?: string;
        }): InfoMessage {
            const message = new InfoMessage({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                details?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.details.length)
                writer.writeString(2, this.details);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InfoMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InfoMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.details = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InfoMessage {
            return InfoMessage.deserialize(bytes);
        }
    }
    export class WarningMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            details?: string;
            show_border?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
                if ("show_border" in data && data.show_border != undefined) {
                    this.show_border = data.show_border;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get show_border() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set show_border(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            message?: string;
            details?: string;
            show_border?: boolean;
        }): WarningMessage {
            const message = new WarningMessage({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            if (data.show_border != null) {
                message.show_border = data.show_border;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                details?: string;
                show_border?: boolean;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            if (this.show_border != null) {
                data.show_border = this.show_border;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.details.length)
                writer.writeString(2, this.details);
            if (this.show_border != false)
                writer.writeBool(3, this.show_border);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WarningMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WarningMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.details = reader.readString();
                        break;
                    case 3:
                        message.show_border = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WarningMessage {
            return WarningMessage.deserialize(bytes);
        }
    }
    export class ProgressUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_id?: string;
            operation?: string;
            status?: string;
            progress?: number;
            loading_phrase?: string;
            elapsed_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("progress" in data && data.progress != undefined) {
                    this.progress = data.progress;
                }
                if ("loading_phrase" in data && data.loading_phrase != undefined) {
                    this.loading_phrase = data.loading_phrase;
                }
                if ("elapsed_ms" in data && data.elapsed_ms != undefined) {
                    this.elapsed_ms = data.elapsed_ms;
                }
            }
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set operation(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get progress() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set progress(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get loading_phrase() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set loading_phrase(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get elapsed_ms() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set elapsed_ms(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            operation_id?: string;
            operation?: string;
            status?: string;
            progress?: number;
            loading_phrase?: string;
            elapsed_ms?: number;
        }): ProgressUpdate {
            const message = new ProgressUpdate({});
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.progress != null) {
                message.progress = data.progress;
            }
            if (data.loading_phrase != null) {
                message.loading_phrase = data.loading_phrase;
            }
            if (data.elapsed_ms != null) {
                message.elapsed_ms = data.elapsed_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_id?: string;
                operation?: string;
                status?: string;
                progress?: number;
                loading_phrase?: string;
                elapsed_ms?: number;
            } = {};
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.progress != null) {
                data.progress = this.progress;
            }
            if (this.loading_phrase != null) {
                data.loading_phrase = this.loading_phrase;
            }
            if (this.elapsed_ms != null) {
                data.elapsed_ms = this.elapsed_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_id.length)
                writer.writeString(1, this.operation_id);
            if (this.operation.length)
                writer.writeString(2, this.operation);
            if (this.status.length)
                writer.writeString(3, this.status);
            if (this.progress != 0)
                writer.writeFloat(4, this.progress);
            if (this.loading_phrase.length)
                writer.writeString(5, this.loading_phrase);
            if (this.elapsed_ms != 0)
                writer.writeInt64(6, this.elapsed_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProgressUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProgressUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_id = reader.readString();
                        break;
                    case 2:
                        message.operation = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readString();
                        break;
                    case 4:
                        message.progress = reader.readFloat();
                        break;
                    case 5:
                        message.loading_phrase = reader.readString();
                        break;
                    case 6:
                        message.elapsed_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProgressUpdate {
            return ProgressUpdate.deserialize(bytes);
        }
    }
    export class HelpContent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            available_commands?: Command[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("available_commands" in data && data.available_commands != undefined) {
                    this.available_commands = data.available_commands;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get available_commands() {
            return pb_1.Message.getRepeatedWrapperField(this, Command, 2) as Command[];
        }
        set available_commands(value: Command[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            content?: string;
            available_commands?: ReturnType<typeof Command.prototype.toObject>[];
        }): HelpContent {
            const message = new HelpContent({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.available_commands != null) {
                message.available_commands = data.available_commands.map(item => Command.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                available_commands?: ReturnType<typeof Command.prototype.toObject>[];
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.available_commands != null) {
                data.available_commands = this.available_commands.map((item: Command) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.available_commands.length)
                writer.writeRepeatedMessage(2, this.available_commands, (item: Command) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelpContent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelpContent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.available_commands, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Command.deserialize(reader), Command));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HelpContent {
            return HelpContent.deserialize(bytes);
        }
    }
    export class Command extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            usage?: string;
            aliases?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("aliases" in data && data.aliases != undefined) {
                    this.aliases = data.aliases;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set usage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get aliases() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set aliases(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            usage?: string;
            aliases?: string[];
        }): Command {
            const message = new Command({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.aliases != null) {
                message.aliases = data.aliases;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                usage?: string;
                aliases?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.aliases != null) {
                data.aliases = this.aliases;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.usage.length)
                writer.writeString(3, this.usage);
            if (this.aliases.length)
                writer.writeRepeatedString(4, this.aliases);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.usage = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Command {
            return Command.deserialize(bytes);
        }
    }
    export class AutoCompleteResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            completions?: Completion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("completions" in data && data.completions != undefined) {
                    this.completions = data.completions;
                }
            }
        }
        get completions() {
            return pb_1.Message.getRepeatedWrapperField(this, Completion, 1) as Completion[];
        }
        set completions(value: Completion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            completions?: ReturnType<typeof Completion.prototype.toObject>[];
        }): AutoCompleteResult {
            const message = new AutoCompleteResult({});
            if (data.completions != null) {
                message.completions = data.completions.map(item => Completion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                completions?: ReturnType<typeof Completion.prototype.toObject>[];
            } = {};
            if (this.completions != null) {
                data.completions = this.completions.map((item: Completion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.completions.length)
                writer.writeRepeatedMessage(1, this.completions, (item: Completion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoCompleteResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoCompleteResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.completions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Completion.deserialize(reader), Completion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoCompleteResult {
            return AutoCompleteResult.deserialize(bytes);
        }
    }
    export class Completion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: string;
            display?: string;
            description?: string;
            type?: CompletionType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("display" in data && data.display != undefined) {
                    this.display = data.display;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get display() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set display(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, CompletionType.COMPLETION_FILE_PATH) as CompletionType;
        }
        set type(value: CompletionType) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            value?: string;
            display?: string;
            description?: string;
            type?: CompletionType;
        }): Completion {
            const message = new Completion({});
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.display != null) {
                message.display = data.display;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: string;
                display?: string;
                description?: string;
                type?: CompletionType;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.display != null) {
                data.display = this.display;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeString(1, this.value);
            if (this.display.length)
                writer.writeString(2, this.display);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.type != CompletionType.COMPLETION_FILE_PATH)
                writer.writeEnum(4, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Completion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Completion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readString();
                        break;
                    case 2:
                        message.display = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Completion {
            return Completion.deserialize(bytes);
        }
    }
    export class FileEditPreview extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_path?: string;
            diff?: DiffPreview;
            requires_confirmation?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("diff" in data && data.diff != undefined) {
                    this.diff = data.diff;
                }
                if ("requires_confirmation" in data && data.requires_confirmation != undefined) {
                    this.requires_confirmation = data.requires_confirmation;
                }
            }
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get diff() {
            return pb_1.Message.getWrapperField(this, DiffPreview, 2) as DiffPreview;
        }
        set diff(value: DiffPreview) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_diff() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get requires_confirmation() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set requires_confirmation(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            file_path?: string;
            diff?: ReturnType<typeof DiffPreview.prototype.toObject>;
            requires_confirmation?: boolean;
        }): FileEditPreview {
            const message = new FileEditPreview({});
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.diff != null) {
                message.diff = DiffPreview.fromObject(data.diff);
            }
            if (data.requires_confirmation != null) {
                message.requires_confirmation = data.requires_confirmation;
            }
            return message;
        }
        toObject() {
            const data: {
                file_path?: string;
                diff?: ReturnType<typeof DiffPreview.prototype.toObject>;
                requires_confirmation?: boolean;
            } = {};
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.diff != null) {
                data.diff = this.diff.toObject();
            }
            if (this.requires_confirmation != null) {
                data.requires_confirmation = this.requires_confirmation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_path.length)
                writer.writeString(1, this.file_path);
            if (this.has_diff)
                writer.writeMessage(2, this.diff, () => this.diff.serialize(writer));
            if (this.requires_confirmation != false)
                writer.writeBool(3, this.requires_confirmation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileEditPreview {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileEditPreview();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.diff, () => message.diff = DiffPreview.deserialize(reader));
                        break;
                    case 3:
                        message.requires_confirmation = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileEditPreview {
            return FileEditPreview.deserialize(bytes);
        }
    }
    export class FileOperationResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_path?: string;
            operation?: FileOperation;
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 2, FileOperation.CREATE) as FileOperation;
        }
        set operation(value: FileOperation) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            file_path?: string;
            operation?: FileOperation;
            success?: boolean;
            error_message?: string;
        }): FileOperationResult {
            const message = new FileOperationResult({});
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                file_path?: string;
                operation?: FileOperation;
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_path.length)
                writer.writeString(1, this.file_path);
            if (this.operation != FileOperation.CREATE)
                writer.writeEnum(2, this.operation);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileOperationResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileOperationResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_path = reader.readString();
                        break;
                    case 2:
                        message.operation = reader.readEnum();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileOperationResult {
            return FileOperationResult.deserialize(bytes);
        }
    }
    export class ConfigUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            theme?: string;
            editor_type?: never;
            approval_mode?: never;
            show_tool_descriptions?: never;
            show_error_details?: never;
            auth_config?: never;
        } | {
            theme?: never;
            editor_type?: string;
            approval_mode?: never;
            show_tool_descriptions?: never;
            show_error_details?: never;
            auth_config?: never;
        } | {
            theme?: never;
            editor_type?: never;
            approval_mode?: ApprovalMode;
            show_tool_descriptions?: never;
            show_error_details?: never;
            auth_config?: never;
        } | {
            theme?: never;
            editor_type?: never;
            approval_mode?: never;
            show_tool_descriptions?: boolean;
            show_error_details?: never;
            auth_config?: never;
        } | {
            theme?: never;
            editor_type?: never;
            approval_mode?: never;
            show_tool_descriptions?: never;
            show_error_details?: boolean;
            auth_config?: never;
        } | {
            theme?: never;
            editor_type?: never;
            approval_mode?: never;
            show_tool_descriptions?: never;
            show_error_details?: never;
            auth_config?: AuthConfig;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("theme" in data && data.theme != undefined) {
                    this.theme = data.theme;
                }
                if ("editor_type" in data && data.editor_type != undefined) {
                    this.editor_type = data.editor_type;
                }
                if ("approval_mode" in data && data.approval_mode != undefined) {
                    this.approval_mode = data.approval_mode;
                }
                if ("show_tool_descriptions" in data && data.show_tool_descriptions != undefined) {
                    this.show_tool_descriptions = data.show_tool_descriptions;
                }
                if ("show_error_details" in data && data.show_error_details != undefined) {
                    this.show_error_details = data.show_error_details;
                }
                if ("auth_config" in data && data.auth_config != undefined) {
                    this.auth_config = data.auth_config;
                }
            }
        }
        get theme() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set theme(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_theme() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get editor_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set editor_type(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_editor_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get approval_mode() {
            return pb_1.Message.getFieldWithDefault(this, 3, ApprovalMode.APPROVAL_MODE_UNSPECIFIED) as ApprovalMode;
        }
        set approval_mode(value: ApprovalMode) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_approval_mode() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get show_tool_descriptions() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set show_tool_descriptions(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_show_tool_descriptions() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get show_error_details() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set show_error_details(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_show_error_details() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get auth_config() {
            return pb_1.Message.getWrapperField(this, AuthConfig, 6) as AuthConfig;
        }
        set auth_config(value: AuthConfig) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_auth_config() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get update() {
            const cases: {
                [index: number]: "none" | "theme" | "editor_type" | "approval_mode" | "show_tool_descriptions" | "show_error_details" | "auth_config";
            } = {
                0: "none",
                1: "theme",
                2: "editor_type",
                3: "approval_mode",
                4: "show_tool_descriptions",
                5: "show_error_details",
                6: "auth_config"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            theme?: string;
            editor_type?: string;
            approval_mode?: ApprovalMode;
            show_tool_descriptions?: boolean;
            show_error_details?: boolean;
            auth_config?: ReturnType<typeof AuthConfig.prototype.toObject>;
        }): ConfigUpdateRequest {
            const message = new ConfigUpdateRequest({});
            if (data.theme != null) {
                message.theme = data.theme;
            }
            if (data.editor_type != null) {
                message.editor_type = data.editor_type;
            }
            if (data.approval_mode != null) {
                message.approval_mode = data.approval_mode;
            }
            if (data.show_tool_descriptions != null) {
                message.show_tool_descriptions = data.show_tool_descriptions;
            }
            if (data.show_error_details != null) {
                message.show_error_details = data.show_error_details;
            }
            if (data.auth_config != null) {
                message.auth_config = AuthConfig.fromObject(data.auth_config);
            }
            return message;
        }
        toObject() {
            const data: {
                theme?: string;
                editor_type?: string;
                approval_mode?: ApprovalMode;
                show_tool_descriptions?: boolean;
                show_error_details?: boolean;
                auth_config?: ReturnType<typeof AuthConfig.prototype.toObject>;
            } = {};
            if (this.theme != null) {
                data.theme = this.theme;
            }
            if (this.editor_type != null) {
                data.editor_type = this.editor_type;
            }
            if (this.approval_mode != null) {
                data.approval_mode = this.approval_mode;
            }
            if (this.show_tool_descriptions != null) {
                data.show_tool_descriptions = this.show_tool_descriptions;
            }
            if (this.show_error_details != null) {
                data.show_error_details = this.show_error_details;
            }
            if (this.auth_config != null) {
                data.auth_config = this.auth_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_theme)
                writer.writeString(1, this.theme);
            if (this.has_editor_type)
                writer.writeString(2, this.editor_type);
            if (this.has_approval_mode)
                writer.writeEnum(3, this.approval_mode);
            if (this.has_show_tool_descriptions)
                writer.writeBool(4, this.show_tool_descriptions);
            if (this.has_show_error_details)
                writer.writeBool(5, this.show_error_details);
            if (this.has_auth_config)
                writer.writeMessage(6, this.auth_config, () => this.auth_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.theme = reader.readString();
                        break;
                    case 2:
                        message.editor_type = reader.readString();
                        break;
                    case 3:
                        message.approval_mode = reader.readEnum();
                        break;
                    case 4:
                        message.show_tool_descriptions = reader.readBool();
                        break;
                    case 5:
                        message.show_error_details = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.auth_config, () => message.auth_config = AuthConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigUpdateRequest {
            return ConfigUpdateRequest.deserialize(bytes);
        }
    }
    export class AuthConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: AuthConfig.AuthType;
            api_key?: string;
            project_id?: string;
            location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("project_id" in data && data.project_id != undefined) {
                    this.project_id = data.project_id;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AuthConfig.AuthType.OAUTH) as AuthConfig.AuthType;
        }
        set type(value: AuthConfig.AuthType) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get project_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set project_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            type?: AuthConfig.AuthType;
            api_key?: string;
            project_id?: string;
            location?: string;
        }): AuthConfig {
            const message = new AuthConfig({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.project_id != null) {
                message.project_id = data.project_id;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: AuthConfig.AuthType;
                api_key?: string;
                project_id?: string;
                location?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.project_id != null) {
                data.project_id = this.project_id;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != AuthConfig.AuthType.OAUTH)
                writer.writeEnum(1, this.type);
            if (this.api_key.length)
                writer.writeString(2, this.api_key);
            if (this.project_id.length)
                writer.writeString(3, this.project_id);
            if (this.location.length)
                writer.writeString(4, this.location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.api_key = reader.readString();
                        break;
                    case 3:
                        message.project_id = reader.readString();
                        break;
                    case 4:
                        message.location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthConfig {
            return AuthConfig.deserialize(bytes);
        }
    }
    export namespace AuthConfig {
        export enum AuthType {
            OAUTH = 0,
            API_KEY = 1,
            VERTEX_AI = 2
        }
    }
    export class GetConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_id?: string;
        }): GetConfigRequest {
            const message = new GetConfigRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigRequest {
            return GetConfigRequest.deserialize(bytes);
        }
    }
    export class GetConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config?: CurrentConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
            }
        }
        get config() {
            return pb_1.Message.getWrapperField(this, CurrentConfig, 1) as CurrentConfig;
        }
        set config(value: CurrentConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            config?: ReturnType<typeof CurrentConfig.prototype.toObject>;
        }): GetConfigResponse {
            const message = new GetConfigResponse({});
            if (data.config != null) {
                message.config = CurrentConfig.fromObject(data.config);
            }
            return message;
        }
        toObject() {
            const data: {
                config?: ReturnType<typeof CurrentConfig.prototype.toObject>;
            } = {};
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_config)
                writer.writeMessage(1, this.config, () => this.config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config, () => message.config = CurrentConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConfigResponse {
            return GetConfigResponse.deserialize(bytes);
        }
    }
    export class CurrentConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            model?: string;
            approval_mode?: ApprovalMode;
            theme?: string;
            editor_type?: string;
            show_tool_descriptions?: boolean;
            show_error_details?: boolean;
            enabled_tools?: string[];
            mcp_servers?: McpServerInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("approval_mode" in data && data.approval_mode != undefined) {
                    this.approval_mode = data.approval_mode;
                }
                if ("theme" in data && data.theme != undefined) {
                    this.theme = data.theme;
                }
                if ("editor_type" in data && data.editor_type != undefined) {
                    this.editor_type = data.editor_type;
                }
                if ("show_tool_descriptions" in data && data.show_tool_descriptions != undefined) {
                    this.show_tool_descriptions = data.show_tool_descriptions;
                }
                if ("show_error_details" in data && data.show_error_details != undefined) {
                    this.show_error_details = data.show_error_details;
                }
                if ("enabled_tools" in data && data.enabled_tools != undefined) {
                    this.enabled_tools = data.enabled_tools;
                }
                if ("mcp_servers" in data && data.mcp_servers != undefined) {
                    this.mcp_servers = data.mcp_servers;
                }
            }
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get approval_mode() {
            return pb_1.Message.getFieldWithDefault(this, 2, ApprovalMode.APPROVAL_MODE_UNSPECIFIED) as ApprovalMode;
        }
        set approval_mode(value: ApprovalMode) {
            pb_1.Message.setField(this, 2, value);
        }
        get theme() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set theme(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get editor_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set editor_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get show_tool_descriptions() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set show_tool_descriptions(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get show_error_details() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set show_error_details(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get enabled_tools() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set enabled_tools(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get mcp_servers() {
            return pb_1.Message.getRepeatedWrapperField(this, McpServerInfo, 8) as McpServerInfo[];
        }
        set mcp_servers(value: McpServerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            model?: string;
            approval_mode?: ApprovalMode;
            theme?: string;
            editor_type?: string;
            show_tool_descriptions?: boolean;
            show_error_details?: boolean;
            enabled_tools?: string[];
            mcp_servers?: ReturnType<typeof McpServerInfo.prototype.toObject>[];
        }): CurrentConfig {
            const message = new CurrentConfig({});
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.approval_mode != null) {
                message.approval_mode = data.approval_mode;
            }
            if (data.theme != null) {
                message.theme = data.theme;
            }
            if (data.editor_type != null) {
                message.editor_type = data.editor_type;
            }
            if (data.show_tool_descriptions != null) {
                message.show_tool_descriptions = data.show_tool_descriptions;
            }
            if (data.show_error_details != null) {
                message.show_error_details = data.show_error_details;
            }
            if (data.enabled_tools != null) {
                message.enabled_tools = data.enabled_tools;
            }
            if (data.mcp_servers != null) {
                message.mcp_servers = data.mcp_servers.map(item => McpServerInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                model?: string;
                approval_mode?: ApprovalMode;
                theme?: string;
                editor_type?: string;
                show_tool_descriptions?: boolean;
                show_error_details?: boolean;
                enabled_tools?: string[];
                mcp_servers?: ReturnType<typeof McpServerInfo.prototype.toObject>[];
            } = {};
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.approval_mode != null) {
                data.approval_mode = this.approval_mode;
            }
            if (this.theme != null) {
                data.theme = this.theme;
            }
            if (this.editor_type != null) {
                data.editor_type = this.editor_type;
            }
            if (this.show_tool_descriptions != null) {
                data.show_tool_descriptions = this.show_tool_descriptions;
            }
            if (this.show_error_details != null) {
                data.show_error_details = this.show_error_details;
            }
            if (this.enabled_tools != null) {
                data.enabled_tools = this.enabled_tools;
            }
            if (this.mcp_servers != null) {
                data.mcp_servers = this.mcp_servers.map((item: McpServerInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.model.length)
                writer.writeString(1, this.model);
            if (this.approval_mode != ApprovalMode.APPROVAL_MODE_UNSPECIFIED)
                writer.writeEnum(2, this.approval_mode);
            if (this.theme.length)
                writer.writeString(3, this.theme);
            if (this.editor_type.length)
                writer.writeString(4, this.editor_type);
            if (this.show_tool_descriptions != false)
                writer.writeBool(5, this.show_tool_descriptions);
            if (this.show_error_details != false)
                writer.writeBool(6, this.show_error_details);
            if (this.enabled_tools.length)
                writer.writeRepeatedString(7, this.enabled_tools);
            if (this.mcp_servers.length)
                writer.writeRepeatedMessage(8, this.mcp_servers, (item: McpServerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.model = reader.readString();
                        break;
                    case 2:
                        message.approval_mode = reader.readEnum();
                        break;
                    case 3:
                        message.theme = reader.readString();
                        break;
                    case 4:
                        message.editor_type = reader.readString();
                        break;
                    case 5:
                        message.show_tool_descriptions = reader.readBool();
                        break;
                    case 6:
                        message.show_error_details = reader.readBool();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        reader.readMessage(message.mcp_servers, () => pb_1.Message.addToRepeatedWrapperField(message, 8, McpServerInfo.deserialize(reader), McpServerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentConfig {
            return CurrentConfig.deserialize(bytes);
        }
    }
    export class ConfigUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            change_notification?: ConfigChanged;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("change_notification" in data && data.change_notification != undefined) {
                    this.change_notification = data.change_notification;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get change_notification() {
            return pb_1.Message.getWrapperField(this, ConfigChanged, 3) as ConfigChanged;
        }
        set change_notification(value: ConfigChanged) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_change_notification() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            change_notification?: ReturnType<typeof ConfigChanged.prototype.toObject>;
        }): ConfigUpdateResponse {
            const message = new ConfigUpdateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.change_notification != null) {
                message.change_notification = ConfigChanged.fromObject(data.change_notification);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                change_notification?: ReturnType<typeof ConfigChanged.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.change_notification != null) {
                data.change_notification = this.change_notification.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.has_change_notification)
                writer.writeMessage(3, this.change_notification, () => this.change_notification.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.change_notification, () => message.change_notification = ConfigChanged.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigUpdateResponse {
            return ConfigUpdateResponse.deserialize(bytes);
        }
    }
    export class ConfigChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            old_value?: string;
            new_value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("old_value" in data && data.old_value != undefined) {
                    this.old_value = data.old_value;
                }
                if ("new_value" in data && data.new_value != undefined) {
                    this.new_value = data.new_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set old_value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            field?: string;
            old_value?: string;
            new_value?: string;
        }): ConfigChanged {
            const message = new ConfigChanged({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.old_value != null) {
                message.old_value = data.old_value;
            }
            if (data.new_value != null) {
                message.new_value = data.new_value;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                old_value?: string;
                new_value?: string;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.old_value != null) {
                data.old_value = this.old_value;
            }
            if (this.new_value != null) {
                data.new_value = this.new_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.old_value.length)
                writer.writeString(2, this.old_value);
            if (this.new_value.length)
                writer.writeString(3, this.new_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.old_value = reader.readString();
                        break;
                    case 3:
                        message.new_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigChanged {
            return ConfigChanged.deserialize(bytes);
        }
    }
    export class ContextSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            loaded_files?: LoadedFile[];
            mcp_servers?: McpServerInfo[];
            git_branch?: string;
            working_directory?: string;
            memory_info?: MemoryInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("loaded_files" in data && data.loaded_files != undefined) {
                    this.loaded_files = data.loaded_files;
                }
                if ("mcp_servers" in data && data.mcp_servers != undefined) {
                    this.mcp_servers = data.mcp_servers;
                }
                if ("git_branch" in data && data.git_branch != undefined) {
                    this.git_branch = data.git_branch;
                }
                if ("working_directory" in data && data.working_directory != undefined) {
                    this.working_directory = data.working_directory;
                }
                if ("memory_info" in data && data.memory_info != undefined) {
                    this.memory_info = data.memory_info;
                }
            }
        }
        get loaded_files() {
            return pb_1.Message.getRepeatedWrapperField(this, LoadedFile, 1) as LoadedFile[];
        }
        set loaded_files(value: LoadedFile[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get mcp_servers() {
            return pb_1.Message.getRepeatedWrapperField(this, McpServerInfo, 2) as McpServerInfo[];
        }
        set mcp_servers(value: McpServerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get git_branch() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set git_branch(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get working_directory() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set working_directory(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get memory_info() {
            return pb_1.Message.getWrapperField(this, MemoryInfo, 5) as MemoryInfo;
        }
        set memory_info(value: MemoryInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_memory_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            loaded_files?: ReturnType<typeof LoadedFile.prototype.toObject>[];
            mcp_servers?: ReturnType<typeof McpServerInfo.prototype.toObject>[];
            git_branch?: string;
            working_directory?: string;
            memory_info?: ReturnType<typeof MemoryInfo.prototype.toObject>;
        }): ContextSummary {
            const message = new ContextSummary({});
            if (data.loaded_files != null) {
                message.loaded_files = data.loaded_files.map(item => LoadedFile.fromObject(item));
            }
            if (data.mcp_servers != null) {
                message.mcp_servers = data.mcp_servers.map(item => McpServerInfo.fromObject(item));
            }
            if (data.git_branch != null) {
                message.git_branch = data.git_branch;
            }
            if (data.working_directory != null) {
                message.working_directory = data.working_directory;
            }
            if (data.memory_info != null) {
                message.memory_info = MemoryInfo.fromObject(data.memory_info);
            }
            return message;
        }
        toObject() {
            const data: {
                loaded_files?: ReturnType<typeof LoadedFile.prototype.toObject>[];
                mcp_servers?: ReturnType<typeof McpServerInfo.prototype.toObject>[];
                git_branch?: string;
                working_directory?: string;
                memory_info?: ReturnType<typeof MemoryInfo.prototype.toObject>;
            } = {};
            if (this.loaded_files != null) {
                data.loaded_files = this.loaded_files.map((item: LoadedFile) => item.toObject());
            }
            if (this.mcp_servers != null) {
                data.mcp_servers = this.mcp_servers.map((item: McpServerInfo) => item.toObject());
            }
            if (this.git_branch != null) {
                data.git_branch = this.git_branch;
            }
            if (this.working_directory != null) {
                data.working_directory = this.working_directory;
            }
            if (this.memory_info != null) {
                data.memory_info = this.memory_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.loaded_files.length)
                writer.writeRepeatedMessage(1, this.loaded_files, (item: LoadedFile) => item.serialize(writer));
            if (this.mcp_servers.length)
                writer.writeRepeatedMessage(2, this.mcp_servers, (item: McpServerInfo) => item.serialize(writer));
            if (this.git_branch.length)
                writer.writeString(3, this.git_branch);
            if (this.working_directory.length)
                writer.writeString(4, this.working_directory);
            if (this.has_memory_info)
                writer.writeMessage(5, this.memory_info, () => this.memory_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContextSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContextSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.loaded_files, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LoadedFile.deserialize(reader), LoadedFile));
                        break;
                    case 2:
                        reader.readMessage(message.mcp_servers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, McpServerInfo.deserialize(reader), McpServerInfo));
                        break;
                    case 3:
                        message.git_branch = reader.readString();
                        break;
                    case 4:
                        message.working_directory = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.memory_info, () => message.memory_info = MemoryInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContextSummary {
            return ContextSummary.deserialize(bytes);
        }
    }
    export class LoadedFile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            type?: string;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            path?: string;
            type?: string;
            size?: number;
        }): LoadedFile {
            const message = new LoadedFile({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                type?: string;
                size?: number;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.size != 0)
                writer.writeInt32(3, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadedFile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadedFile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoadedFile {
            return LoadedFile.deserialize(bytes);
        }
    }
    export class McpServerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            status?: string;
            available_tools?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("available_tools" in data && data.available_tools != undefined) {
                    this.available_tools = data.available_tools;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get available_tools() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set available_tools(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            status?: string;
            available_tools?: string[];
        }): McpServerInfo {
            const message = new McpServerInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.available_tools != null) {
                message.available_tools = data.available_tools;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                status?: string;
                available_tools?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.available_tools != null) {
                data.available_tools = this.available_tools;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.available_tools.length)
                writer.writeRepeatedString(3, this.available_tools);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): McpServerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new McpServerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): McpServerInfo {
            return McpServerInfo.deserialize(bytes);
        }
    }
    export class MemoryInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            has_user_memory?: boolean;
            memory_size?: number;
            last_updated?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("has_user_memory" in data && data.has_user_memory != undefined) {
                    this.has_user_memory = data.has_user_memory;
                }
                if ("memory_size" in data && data.memory_size != undefined) {
                    this.memory_size = data.memory_size;
                }
                if ("last_updated" in data && data.last_updated != undefined) {
                    this.last_updated = data.last_updated;
                }
            }
        }
        get has_user_memory() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set has_user_memory(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get memory_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set memory_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_updated() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set last_updated(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            has_user_memory?: boolean;
            memory_size?: number;
            last_updated?: string;
        }): MemoryInfo {
            const message = new MemoryInfo({});
            if (data.has_user_memory != null) {
                message.has_user_memory = data.has_user_memory;
            }
            if (data.memory_size != null) {
                message.memory_size = data.memory_size;
            }
            if (data.last_updated != null) {
                message.last_updated = data.last_updated;
            }
            return message;
        }
        toObject() {
            const data: {
                has_user_memory?: boolean;
                memory_size?: number;
                last_updated?: string;
            } = {};
            if (this.has_user_memory != null) {
                data.has_user_memory = this.has_user_memory;
            }
            if (this.memory_size != null) {
                data.memory_size = this.memory_size;
            }
            if (this.last_updated != null) {
                data.last_updated = this.last_updated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_memory != false)
                writer.writeBool(1, this.has_user_memory);
            if (this.memory_size != 0)
                writer.writeInt32(2, this.memory_size);
            if (this.last_updated.length)
                writer.writeString(3, this.last_updated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.has_user_memory = reader.readBool();
                        break;
                    case 2:
                        message.memory_size = reader.readInt32();
                        break;
                    case 3:
                        message.last_updated = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryInfo {
            return MemoryInfo.deserialize(bytes);
        }
    }
    export class UsageMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_usage?: TokenUsage;
            api_time_ms?: number;
            model_used?: string;
            used_fallback?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_usage" in data && data.token_usage != undefined) {
                    this.token_usage = data.token_usage;
                }
                if ("api_time_ms" in data && data.api_time_ms != undefined) {
                    this.api_time_ms = data.api_time_ms;
                }
                if ("model_used" in data && data.model_used != undefined) {
                    this.model_used = data.model_used;
                }
                if ("used_fallback" in data && data.used_fallback != undefined) {
                    this.used_fallback = data.used_fallback;
                }
            }
        }
        get token_usage() {
            return pb_1.Message.getWrapperField(this, TokenUsage, 1) as TokenUsage;
        }
        set token_usage(value: TokenUsage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_token_usage() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get api_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set api_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get model_used() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set model_used(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get used_fallback() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set used_fallback(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            token_usage?: ReturnType<typeof TokenUsage.prototype.toObject>;
            api_time_ms?: number;
            model_used?: string;
            used_fallback?: boolean;
        }): UsageMetadata {
            const message = new UsageMetadata({});
            if (data.token_usage != null) {
                message.token_usage = TokenUsage.fromObject(data.token_usage);
            }
            if (data.api_time_ms != null) {
                message.api_time_ms = data.api_time_ms;
            }
            if (data.model_used != null) {
                message.model_used = data.model_used;
            }
            if (data.used_fallback != null) {
                message.used_fallback = data.used_fallback;
            }
            return message;
        }
        toObject() {
            const data: {
                token_usage?: ReturnType<typeof TokenUsage.prototype.toObject>;
                api_time_ms?: number;
                model_used?: string;
                used_fallback?: boolean;
            } = {};
            if (this.token_usage != null) {
                data.token_usage = this.token_usage.toObject();
            }
            if (this.api_time_ms != null) {
                data.api_time_ms = this.api_time_ms;
            }
            if (this.model_used != null) {
                data.model_used = this.model_used;
            }
            if (this.used_fallback != null) {
                data.used_fallback = this.used_fallback;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_token_usage)
                writer.writeMessage(1, this.token_usage, () => this.token_usage.serialize(writer));
            if (this.api_time_ms != 0)
                writer.writeInt64(2, this.api_time_ms);
            if (this.model_used.length)
                writer.writeString(3, this.model_used);
            if (this.used_fallback != false)
                writer.writeBool(4, this.used_fallback);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsageMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsageMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.token_usage, () => message.token_usage = TokenUsage.deserialize(reader));
                        break;
                    case 2:
                        message.api_time_ms = reader.readInt64();
                        break;
                    case 3:
                        message.model_used = reader.readString();
                        break;
                    case 4:
                        message.used_fallback = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsageMetadata {
            return UsageMetadata.deserialize(bytes);
        }
    }
    export class AnalyticsReport extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
            performance_metrics?: PerformanceMetrics;
            tool_usage?: ToolUsageStats[];
            model_usage?: ModelUsageStats[];
            session_summary?: SessionSummary;
            recent_activity?: ActivityEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("performance_metrics" in data && data.performance_metrics != undefined) {
                    this.performance_metrics = data.performance_metrics;
                }
                if ("tool_usage" in data && data.tool_usage != undefined) {
                    this.tool_usage = data.tool_usage;
                }
                if ("model_usage" in data && data.model_usage != undefined) {
                    this.model_usage = data.model_usage;
                }
                if ("session_summary" in data && data.session_summary != undefined) {
                    this.session_summary = data.session_summary;
                }
                if ("recent_activity" in data && data.recent_activity != undefined) {
                    this.recent_activity = data.recent_activity;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get performance_metrics() {
            return pb_1.Message.getWrapperField(this, PerformanceMetrics, 2) as PerformanceMetrics;
        }
        set performance_metrics(value: PerformanceMetrics) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_performance_metrics() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tool_usage() {
            return pb_1.Message.getRepeatedWrapperField(this, ToolUsageStats, 3) as ToolUsageStats[];
        }
        set tool_usage(value: ToolUsageStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get model_usage() {
            return pb_1.Message.getRepeatedWrapperField(this, ModelUsageStats, 4) as ModelUsageStats[];
        }
        set model_usage(value: ModelUsageStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get session_summary() {
            return pb_1.Message.getWrapperField(this, SessionSummary, 5) as SessionSummary;
        }
        set session_summary(value: SessionSummary) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_session_summary() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get recent_activity() {
            return pb_1.Message.getRepeatedWrapperField(this, ActivityEntry, 6) as ActivityEntry[];
        }
        set recent_activity(value: ActivityEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            timestamp?: number;
            performance_metrics?: ReturnType<typeof PerformanceMetrics.prototype.toObject>;
            tool_usage?: ReturnType<typeof ToolUsageStats.prototype.toObject>[];
            model_usage?: ReturnType<typeof ModelUsageStats.prototype.toObject>[];
            session_summary?: ReturnType<typeof SessionSummary.prototype.toObject>;
            recent_activity?: ReturnType<typeof ActivityEntry.prototype.toObject>[];
        }): AnalyticsReport {
            const message = new AnalyticsReport({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.performance_metrics != null) {
                message.performance_metrics = PerformanceMetrics.fromObject(data.performance_metrics);
            }
            if (data.tool_usage != null) {
                message.tool_usage = data.tool_usage.map(item => ToolUsageStats.fromObject(item));
            }
            if (data.model_usage != null) {
                message.model_usage = data.model_usage.map(item => ModelUsageStats.fromObject(item));
            }
            if (data.session_summary != null) {
                message.session_summary = SessionSummary.fromObject(data.session_summary);
            }
            if (data.recent_activity != null) {
                message.recent_activity = data.recent_activity.map(item => ActivityEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                performance_metrics?: ReturnType<typeof PerformanceMetrics.prototype.toObject>;
                tool_usage?: ReturnType<typeof ToolUsageStats.prototype.toObject>[];
                model_usage?: ReturnType<typeof ModelUsageStats.prototype.toObject>[];
                session_summary?: ReturnType<typeof SessionSummary.prototype.toObject>;
                recent_activity?: ReturnType<typeof ActivityEntry.prototype.toObject>[];
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.performance_metrics != null) {
                data.performance_metrics = this.performance_metrics.toObject();
            }
            if (this.tool_usage != null) {
                data.tool_usage = this.tool_usage.map((item: ToolUsageStats) => item.toObject());
            }
            if (this.model_usage != null) {
                data.model_usage = this.model_usage.map((item: ModelUsageStats) => item.toObject());
            }
            if (this.session_summary != null) {
                data.session_summary = this.session_summary.toObject();
            }
            if (this.recent_activity != null) {
                data.recent_activity = this.recent_activity.map((item: ActivityEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeInt64(1, this.timestamp);
            if (this.has_performance_metrics)
                writer.writeMessage(2, this.performance_metrics, () => this.performance_metrics.serialize(writer));
            if (this.tool_usage.length)
                writer.writeRepeatedMessage(3, this.tool_usage, (item: ToolUsageStats) => item.serialize(writer));
            if (this.model_usage.length)
                writer.writeRepeatedMessage(4, this.model_usage, (item: ModelUsageStats) => item.serialize(writer));
            if (this.has_session_summary)
                writer.writeMessage(5, this.session_summary, () => this.session_summary.serialize(writer));
            if (this.recent_activity.length)
                writer.writeRepeatedMessage(6, this.recent_activity, (item: ActivityEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalyticsReport {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalyticsReport();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.performance_metrics, () => message.performance_metrics = PerformanceMetrics.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.tool_usage, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ToolUsageStats.deserialize(reader), ToolUsageStats));
                        break;
                    case 4:
                        reader.readMessage(message.model_usage, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ModelUsageStats.deserialize(reader), ModelUsageStats));
                        break;
                    case 5:
                        reader.readMessage(message.session_summary, () => message.session_summary = SessionSummary.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.recent_activity, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ActivityEntry.deserialize(reader), ActivityEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnalyticsReport {
            return AnalyticsReport.deserialize(bytes);
        }
    }
    export class PerformanceMetrics extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_requests?: number;
            average_response_time_ms?: number;
            requests_per_minute?: number;
            error_rate?: number;
            success_rate?: number;
            concurrent_sessions?: number;
            peak_concurrent_sessions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_requests" in data && data.total_requests != undefined) {
                    this.total_requests = data.total_requests;
                }
                if ("average_response_time_ms" in data && data.average_response_time_ms != undefined) {
                    this.average_response_time_ms = data.average_response_time_ms;
                }
                if ("requests_per_minute" in data && data.requests_per_minute != undefined) {
                    this.requests_per_minute = data.requests_per_minute;
                }
                if ("error_rate" in data && data.error_rate != undefined) {
                    this.error_rate = data.error_rate;
                }
                if ("success_rate" in data && data.success_rate != undefined) {
                    this.success_rate = data.success_rate;
                }
                if ("concurrent_sessions" in data && data.concurrent_sessions != undefined) {
                    this.concurrent_sessions = data.concurrent_sessions;
                }
                if ("peak_concurrent_sessions" in data && data.peak_concurrent_sessions != undefined) {
                    this.peak_concurrent_sessions = data.peak_concurrent_sessions;
                }
            }
        }
        get total_requests() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total_requests(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get average_response_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set average_response_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get requests_per_minute() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requests_per_minute(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_rate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set error_rate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get success_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set success_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get concurrent_sessions() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set concurrent_sessions(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get peak_concurrent_sessions() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set peak_concurrent_sessions(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            total_requests?: number;
            average_response_time_ms?: number;
            requests_per_minute?: number;
            error_rate?: number;
            success_rate?: number;
            concurrent_sessions?: number;
            peak_concurrent_sessions?: number;
        }): PerformanceMetrics {
            const message = new PerformanceMetrics({});
            if (data.total_requests != null) {
                message.total_requests = data.total_requests;
            }
            if (data.average_response_time_ms != null) {
                message.average_response_time_ms = data.average_response_time_ms;
            }
            if (data.requests_per_minute != null) {
                message.requests_per_minute = data.requests_per_minute;
            }
            if (data.error_rate != null) {
                message.error_rate = data.error_rate;
            }
            if (data.success_rate != null) {
                message.success_rate = data.success_rate;
            }
            if (data.concurrent_sessions != null) {
                message.concurrent_sessions = data.concurrent_sessions;
            }
            if (data.peak_concurrent_sessions != null) {
                message.peak_concurrent_sessions = data.peak_concurrent_sessions;
            }
            return message;
        }
        toObject() {
            const data: {
                total_requests?: number;
                average_response_time_ms?: number;
                requests_per_minute?: number;
                error_rate?: number;
                success_rate?: number;
                concurrent_sessions?: number;
                peak_concurrent_sessions?: number;
            } = {};
            if (this.total_requests != null) {
                data.total_requests = this.total_requests;
            }
            if (this.average_response_time_ms != null) {
                data.average_response_time_ms = this.average_response_time_ms;
            }
            if (this.requests_per_minute != null) {
                data.requests_per_minute = this.requests_per_minute;
            }
            if (this.error_rate != null) {
                data.error_rate = this.error_rate;
            }
            if (this.success_rate != null) {
                data.success_rate = this.success_rate;
            }
            if (this.concurrent_sessions != null) {
                data.concurrent_sessions = this.concurrent_sessions;
            }
            if (this.peak_concurrent_sessions != null) {
                data.peak_concurrent_sessions = this.peak_concurrent_sessions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total_requests != 0)
                writer.writeInt32(1, this.total_requests);
            if (this.average_response_time_ms != 0)
                writer.writeDouble(2, this.average_response_time_ms);
            if (this.requests_per_minute != 0)
                writer.writeDouble(3, this.requests_per_minute);
            if (this.error_rate != 0)
                writer.writeDouble(4, this.error_rate);
            if (this.success_rate != 0)
                writer.writeDouble(5, this.success_rate);
            if (this.concurrent_sessions != 0)
                writer.writeInt32(6, this.concurrent_sessions);
            if (this.peak_concurrent_sessions != 0)
                writer.writeInt32(7, this.peak_concurrent_sessions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PerformanceMetrics {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PerformanceMetrics();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total_requests = reader.readInt32();
                        break;
                    case 2:
                        message.average_response_time_ms = reader.readDouble();
                        break;
                    case 3:
                        message.requests_per_minute = reader.readDouble();
                        break;
                    case 4:
                        message.error_rate = reader.readDouble();
                        break;
                    case 5:
                        message.success_rate = reader.readDouble();
                        break;
                    case 6:
                        message.concurrent_sessions = reader.readInt32();
                        break;
                    case 7:
                        message.peak_concurrent_sessions = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PerformanceMetrics {
            return PerformanceMetrics.deserialize(bytes);
        }
    }
    export class ToolUsageStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tool_name?: string;
            execution_count?: number;
            total_execution_time_ms?: number;
            average_execution_time_ms?: number;
            success_rate?: number;
            last_used?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tool_name" in data && data.tool_name != undefined) {
                    this.tool_name = data.tool_name;
                }
                if ("execution_count" in data && data.execution_count != undefined) {
                    this.execution_count = data.execution_count;
                }
                if ("total_execution_time_ms" in data && data.total_execution_time_ms != undefined) {
                    this.total_execution_time_ms = data.total_execution_time_ms;
                }
                if ("average_execution_time_ms" in data && data.average_execution_time_ms != undefined) {
                    this.average_execution_time_ms = data.average_execution_time_ms;
                }
                if ("success_rate" in data && data.success_rate != undefined) {
                    this.success_rate = data.success_rate;
                }
                if ("last_used" in data && data.last_used != undefined) {
                    this.last_used = data.last_used;
                }
            }
        }
        get tool_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tool_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get execution_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set execution_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_execution_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_execution_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get average_execution_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set average_execution_time_ms(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get success_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set success_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_used() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set last_used(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            tool_name?: string;
            execution_count?: number;
            total_execution_time_ms?: number;
            average_execution_time_ms?: number;
            success_rate?: number;
            last_used?: number;
        }): ToolUsageStats {
            const message = new ToolUsageStats({});
            if (data.tool_name != null) {
                message.tool_name = data.tool_name;
            }
            if (data.execution_count != null) {
                message.execution_count = data.execution_count;
            }
            if (data.total_execution_time_ms != null) {
                message.total_execution_time_ms = data.total_execution_time_ms;
            }
            if (data.average_execution_time_ms != null) {
                message.average_execution_time_ms = data.average_execution_time_ms;
            }
            if (data.success_rate != null) {
                message.success_rate = data.success_rate;
            }
            if (data.last_used != null) {
                message.last_used = data.last_used;
            }
            return message;
        }
        toObject() {
            const data: {
                tool_name?: string;
                execution_count?: number;
                total_execution_time_ms?: number;
                average_execution_time_ms?: number;
                success_rate?: number;
                last_used?: number;
            } = {};
            if (this.tool_name != null) {
                data.tool_name = this.tool_name;
            }
            if (this.execution_count != null) {
                data.execution_count = this.execution_count;
            }
            if (this.total_execution_time_ms != null) {
                data.total_execution_time_ms = this.total_execution_time_ms;
            }
            if (this.average_execution_time_ms != null) {
                data.average_execution_time_ms = this.average_execution_time_ms;
            }
            if (this.success_rate != null) {
                data.success_rate = this.success_rate;
            }
            if (this.last_used != null) {
                data.last_used = this.last_used;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tool_name.length)
                writer.writeString(1, this.tool_name);
            if (this.execution_count != 0)
                writer.writeInt32(2, this.execution_count);
            if (this.total_execution_time_ms != 0)
                writer.writeDouble(3, this.total_execution_time_ms);
            if (this.average_execution_time_ms != 0)
                writer.writeDouble(4, this.average_execution_time_ms);
            if (this.success_rate != 0)
                writer.writeDouble(5, this.success_rate);
            if (this.last_used != 0)
                writer.writeInt64(6, this.last_used);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolUsageStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolUsageStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tool_name = reader.readString();
                        break;
                    case 2:
                        message.execution_count = reader.readInt32();
                        break;
                    case 3:
                        message.total_execution_time_ms = reader.readDouble();
                        break;
                    case 4:
                        message.average_execution_time_ms = reader.readDouble();
                        break;
                    case 5:
                        message.success_rate = reader.readDouble();
                        break;
                    case 6:
                        message.last_used = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolUsageStats {
            return ToolUsageStats.deserialize(bytes);
        }
    }
    export class ModelUsageStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            model_name?: string;
            request_count?: number;
            total_tokens?: TokenUsage;
            total_cost?: number;
            average_latency_ms?: number;
            last_used?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("model_name" in data && data.model_name != undefined) {
                    this.model_name = data.model_name;
                }
                if ("request_count" in data && data.request_count != undefined) {
                    this.request_count = data.request_count;
                }
                if ("total_tokens" in data && data.total_tokens != undefined) {
                    this.total_tokens = data.total_tokens;
                }
                if ("total_cost" in data && data.total_cost != undefined) {
                    this.total_cost = data.total_cost;
                }
                if ("average_latency_ms" in data && data.average_latency_ms != undefined) {
                    this.average_latency_ms = data.average_latency_ms;
                }
                if ("last_used" in data && data.last_used != undefined) {
                    this.last_used = data.last_used;
                }
            }
        }
        get model_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set model_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set request_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_tokens() {
            return pb_1.Message.getWrapperField(this, TokenUsage, 3) as TokenUsage;
        }
        set total_tokens(value: TokenUsage) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_total_tokens() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get total_cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get average_latency_ms() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set average_latency_ms(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get last_used() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set last_used(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            model_name?: string;
            request_count?: number;
            total_tokens?: ReturnType<typeof TokenUsage.prototype.toObject>;
            total_cost?: number;
            average_latency_ms?: number;
            last_used?: number;
        }): ModelUsageStats {
            const message = new ModelUsageStats({});
            if (data.model_name != null) {
                message.model_name = data.model_name;
            }
            if (data.request_count != null) {
                message.request_count = data.request_count;
            }
            if (data.total_tokens != null) {
                message.total_tokens = TokenUsage.fromObject(data.total_tokens);
            }
            if (data.total_cost != null) {
                message.total_cost = data.total_cost;
            }
            if (data.average_latency_ms != null) {
                message.average_latency_ms = data.average_latency_ms;
            }
            if (data.last_used != null) {
                message.last_used = data.last_used;
            }
            return message;
        }
        toObject() {
            const data: {
                model_name?: string;
                request_count?: number;
                total_tokens?: ReturnType<typeof TokenUsage.prototype.toObject>;
                total_cost?: number;
                average_latency_ms?: number;
                last_used?: number;
            } = {};
            if (this.model_name != null) {
                data.model_name = this.model_name;
            }
            if (this.request_count != null) {
                data.request_count = this.request_count;
            }
            if (this.total_tokens != null) {
                data.total_tokens = this.total_tokens.toObject();
            }
            if (this.total_cost != null) {
                data.total_cost = this.total_cost;
            }
            if (this.average_latency_ms != null) {
                data.average_latency_ms = this.average_latency_ms;
            }
            if (this.last_used != null) {
                data.last_used = this.last_used;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.model_name.length)
                writer.writeString(1, this.model_name);
            if (this.request_count != 0)
                writer.writeInt32(2, this.request_count);
            if (this.has_total_tokens)
                writer.writeMessage(3, this.total_tokens, () => this.total_tokens.serialize(writer));
            if (this.total_cost != 0)
                writer.writeDouble(4, this.total_cost);
            if (this.average_latency_ms != 0)
                writer.writeDouble(5, this.average_latency_ms);
            if (this.last_used != 0)
                writer.writeInt64(6, this.last_used);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModelUsageStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModelUsageStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.model_name = reader.readString();
                        break;
                    case 2:
                        message.request_count = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.total_tokens, () => message.total_tokens = TokenUsage.deserialize(reader));
                        break;
                    case 4:
                        message.total_cost = reader.readDouble();
                        break;
                    case 5:
                        message.average_latency_ms = reader.readDouble();
                        break;
                    case 6:
                        message.last_used = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModelUsageStats {
            return ModelUsageStats.deserialize(bytes);
        }
    }
    export class SessionSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_sessions?: number;
            active_sessions?: number;
            average_session_duration_ms?: number;
            total_messages?: number;
            total_tool_executions?: number;
            total_errors?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_sessions" in data && data.total_sessions != undefined) {
                    this.total_sessions = data.total_sessions;
                }
                if ("active_sessions" in data && data.active_sessions != undefined) {
                    this.active_sessions = data.active_sessions;
                }
                if ("average_session_duration_ms" in data && data.average_session_duration_ms != undefined) {
                    this.average_session_duration_ms = data.average_session_duration_ms;
                }
                if ("total_messages" in data && data.total_messages != undefined) {
                    this.total_messages = data.total_messages;
                }
                if ("total_tool_executions" in data && data.total_tool_executions != undefined) {
                    this.total_tool_executions = data.total_tool_executions;
                }
                if ("total_errors" in data && data.total_errors != undefined) {
                    this.total_errors = data.total_errors;
                }
            }
        }
        get total_sessions() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total_sessions(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get active_sessions() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set active_sessions(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get average_session_duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set average_session_duration_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get total_messages() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_messages(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_tool_executions() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_tool_executions(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get total_errors() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set total_errors(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            total_sessions?: number;
            active_sessions?: number;
            average_session_duration_ms?: number;
            total_messages?: number;
            total_tool_executions?: number;
            total_errors?: number;
        }): SessionSummary {
            const message = new SessionSummary({});
            if (data.total_sessions != null) {
                message.total_sessions = data.total_sessions;
            }
            if (data.active_sessions != null) {
                message.active_sessions = data.active_sessions;
            }
            if (data.average_session_duration_ms != null) {
                message.average_session_duration_ms = data.average_session_duration_ms;
            }
            if (data.total_messages != null) {
                message.total_messages = data.total_messages;
            }
            if (data.total_tool_executions != null) {
                message.total_tool_executions = data.total_tool_executions;
            }
            if (data.total_errors != null) {
                message.total_errors = data.total_errors;
            }
            return message;
        }
        toObject() {
            const data: {
                total_sessions?: number;
                active_sessions?: number;
                average_session_duration_ms?: number;
                total_messages?: number;
                total_tool_executions?: number;
                total_errors?: number;
            } = {};
            if (this.total_sessions != null) {
                data.total_sessions = this.total_sessions;
            }
            if (this.active_sessions != null) {
                data.active_sessions = this.active_sessions;
            }
            if (this.average_session_duration_ms != null) {
                data.average_session_duration_ms = this.average_session_duration_ms;
            }
            if (this.total_messages != null) {
                data.total_messages = this.total_messages;
            }
            if (this.total_tool_executions != null) {
                data.total_tool_executions = this.total_tool_executions;
            }
            if (this.total_errors != null) {
                data.total_errors = this.total_errors;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total_sessions != 0)
                writer.writeInt32(1, this.total_sessions);
            if (this.active_sessions != 0)
                writer.writeInt32(2, this.active_sessions);
            if (this.average_session_duration_ms != 0)
                writer.writeDouble(3, this.average_session_duration_ms);
            if (this.total_messages != 0)
                writer.writeInt32(4, this.total_messages);
            if (this.total_tool_executions != 0)
                writer.writeInt32(5, this.total_tool_executions);
            if (this.total_errors != 0)
                writer.writeInt32(6, this.total_errors);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total_sessions = reader.readInt32();
                        break;
                    case 2:
                        message.active_sessions = reader.readInt32();
                        break;
                    case 3:
                        message.average_session_duration_ms = reader.readDouble();
                        break;
                    case 4:
                        message.total_messages = reader.readInt32();
                        break;
                    case 5:
                        message.total_tool_executions = reader.readInt32();
                        break;
                    case 6:
                        message.total_errors = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionSummary {
            return SessionSummary.deserialize(bytes);
        }
    }
    export class ActivityEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
            session_id?: string;
            action?: string;
            details?: string;
            duration_ms?: number;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
                if ("duration_ms" in data && data.duration_ms != undefined) {
                    this.duration_ms = data.duration_ms;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set duration_ms(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            timestamp?: number;
            session_id?: string;
            action?: string;
            details?: string;
            duration_ms?: number;
            success?: boolean;
        }): ActivityEntry {
            const message = new ActivityEntry({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            if (data.duration_ms != null) {
                message.duration_ms = data.duration_ms;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                session_id?: string;
                action?: string;
                details?: string;
                duration_ms?: number;
                success?: boolean;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            if (this.duration_ms != null) {
                data.duration_ms = this.duration_ms;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeInt64(1, this.timestamp);
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.action.length)
                writer.writeString(3, this.action);
            if (this.details.length)
                writer.writeString(4, this.details);
            if (this.duration_ms != 0)
                writer.writeInt64(5, this.duration_ms);
            if (this.success != false)
                writer.writeBool(6, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivityEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readInt64();
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        message.action = reader.readString();
                        break;
                    case 4:
                        message.details = reader.readString();
                        break;
                    case 5:
                        message.duration_ms = reader.readInt64();
                        break;
                    case 6:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActivityEntry {
            return ActivityEntry.deserialize(bytes);
        }
    }
    export class MetricsSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
            time_range_ms?: number;
            metrics?: MetricSummary[];
            active_alerts?: AlertInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("time_range_ms" in data && data.time_range_ms != undefined) {
                    this.time_range_ms = data.time_range_ms;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("active_alerts" in data && data.active_alerts != undefined) {
                    this.active_alerts = data.active_alerts;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get time_range_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set time_range_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, MetricSummary, 3) as MetricSummary[];
        }
        set metrics(value: MetricSummary[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get active_alerts() {
            return pb_1.Message.getRepeatedWrapperField(this, AlertInfo, 4) as AlertInfo[];
        }
        set active_alerts(value: AlertInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            timestamp?: number;
            time_range_ms?: number;
            metrics?: ReturnType<typeof MetricSummary.prototype.toObject>[];
            active_alerts?: ReturnType<typeof AlertInfo.prototype.toObject>[];
        }): MetricsSummary {
            const message = new MetricsSummary({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.time_range_ms != null) {
                message.time_range_ms = data.time_range_ms;
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => MetricSummary.fromObject(item));
            }
            if (data.active_alerts != null) {
                message.active_alerts = data.active_alerts.map(item => AlertInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                time_range_ms?: number;
                metrics?: ReturnType<typeof MetricSummary.prototype.toObject>[];
                active_alerts?: ReturnType<typeof AlertInfo.prototype.toObject>[];
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.time_range_ms != null) {
                data.time_range_ms = this.time_range_ms;
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: MetricSummary) => item.toObject());
            }
            if (this.active_alerts != null) {
                data.active_alerts = this.active_alerts.map((item: AlertInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeInt64(1, this.timestamp);
            if (this.time_range_ms != 0)
                writer.writeInt64(2, this.time_range_ms);
            if (this.metrics.length)
                writer.writeRepeatedMessage(3, this.metrics, (item: MetricSummary) => item.serialize(writer));
            if (this.active_alerts.length)
                writer.writeRepeatedMessage(4, this.active_alerts, (item: AlertInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readInt64();
                        break;
                    case 2:
                        message.time_range_ms = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 3, MetricSummary.deserialize(reader), MetricSummary));
                        break;
                    case 4:
                        reader.readMessage(message.active_alerts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AlertInfo.deserialize(reader), AlertInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsSummary {
            return MetricsSummary.deserialize(bytes);
        }
    }
    export class MetricSummary extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            unit?: string;
            current_value?: number;
            min_value?: number;
            max_value?: number;
            average_value?: number;
            data_points?: number;
            aggregation_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("current_value" in data && data.current_value != undefined) {
                    this.current_value = data.current_value;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("average_value" in data && data.average_value != undefined) {
                    this.average_value = data.average_value;
                }
                if ("data_points" in data && data.data_points != undefined) {
                    this.data_points = data.data_points;
                }
                if ("aggregation_type" in data && data.aggregation_type != undefined) {
                    this.aggregation_type = data.aggregation_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get unit() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set unit(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get current_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set current_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get min_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set min_value(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get max_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set max_value(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get average_value() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set average_value(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get data_points() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set data_points(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get aggregation_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set aggregation_type(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            unit?: string;
            current_value?: number;
            min_value?: number;
            max_value?: number;
            average_value?: number;
            data_points?: number;
            aggregation_type?: string;
        }): MetricSummary {
            const message = new MetricSummary({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.current_value != null) {
                message.current_value = data.current_value;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.average_value != null) {
                message.average_value = data.average_value;
            }
            if (data.data_points != null) {
                message.data_points = data.data_points;
            }
            if (data.aggregation_type != null) {
                message.aggregation_type = data.aggregation_type;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                unit?: string;
                current_value?: number;
                min_value?: number;
                max_value?: number;
                average_value?: number;
                data_points?: number;
                aggregation_type?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.current_value != null) {
                data.current_value = this.current_value;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.average_value != null) {
                data.average_value = this.average_value;
            }
            if (this.data_points != null) {
                data.data_points = this.data_points;
            }
            if (this.aggregation_type != null) {
                data.aggregation_type = this.aggregation_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.unit.length)
                writer.writeString(3, this.unit);
            if (this.current_value != 0)
                writer.writeDouble(4, this.current_value);
            if (this.min_value != 0)
                writer.writeDouble(5, this.min_value);
            if (this.max_value != 0)
                writer.writeDouble(6, this.max_value);
            if (this.average_value != 0)
                writer.writeDouble(7, this.average_value);
            if (this.data_points != 0)
                writer.writeInt32(8, this.data_points);
            if (this.aggregation_type.length)
                writer.writeString(9, this.aggregation_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricSummary {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricSummary();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.unit = reader.readString();
                        break;
                    case 4:
                        message.current_value = reader.readDouble();
                        break;
                    case 5:
                        message.min_value = reader.readDouble();
                        break;
                    case 6:
                        message.max_value = reader.readDouble();
                        break;
                    case 7:
                        message.average_value = reader.readDouble();
                        break;
                    case 8:
                        message.data_points = reader.readInt32();
                        break;
                    case 9:
                        message.aggregation_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricSummary {
            return MetricSummary.deserialize(bytes);
        }
    }
    export class AlertInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            metric_name?: string;
            current_value?: number;
            threshold?: number;
            condition?: string;
            triggered_at?: number;
            severity?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("metric_name" in data && data.metric_name != undefined) {
                    this.metric_name = data.metric_name;
                }
                if ("current_value" in data && data.current_value != undefined) {
                    this.current_value = data.current_value;
                }
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("condition" in data && data.condition != undefined) {
                    this.condition = data.condition;
                }
                if ("triggered_at" in data && data.triggered_at != undefined) {
                    this.triggered_at = data.triggered_at;
                }
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get metric_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set metric_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get condition() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set condition(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get triggered_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set triggered_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get severity() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set severity(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            metric_name?: string;
            current_value?: number;
            threshold?: number;
            condition?: string;
            triggered_at?: number;
            severity?: string;
            description?: string;
        }): AlertInfo {
            const message = new AlertInfo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.metric_name != null) {
                message.metric_name = data.metric_name;
            }
            if (data.current_value != null) {
                message.current_value = data.current_value;
            }
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.condition != null) {
                message.condition = data.condition;
            }
            if (data.triggered_at != null) {
                message.triggered_at = data.triggered_at;
            }
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                metric_name?: string;
                current_value?: number;
                threshold?: number;
                condition?: string;
                triggered_at?: number;
                severity?: string;
                description?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.metric_name != null) {
                data.metric_name = this.metric_name;
            }
            if (this.current_value != null) {
                data.current_value = this.current_value;
            }
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.condition != null) {
                data.condition = this.condition;
            }
            if (this.triggered_at != null) {
                data.triggered_at = this.triggered_at;
            }
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.metric_name.length)
                writer.writeString(2, this.metric_name);
            if (this.current_value != 0)
                writer.writeDouble(3, this.current_value);
            if (this.threshold != 0)
                writer.writeDouble(4, this.threshold);
            if (this.condition.length)
                writer.writeString(5, this.condition);
            if (this.triggered_at != 0)
                writer.writeInt64(6, this.triggered_at);
            if (this.severity.length)
                writer.writeString(7, this.severity);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlertInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlertInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.metric_name = reader.readString();
                        break;
                    case 3:
                        message.current_value = reader.readDouble();
                        break;
                    case 4:
                        message.threshold = reader.readDouble();
                        break;
                    case 5:
                        message.condition = reader.readString();
                        break;
                    case 6:
                        message.triggered_at = reader.readInt64();
                        break;
                    case 7:
                        message.severity = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlertInfo {
            return AlertInfo.deserialize(bytes);
        }
    }
    export class FileReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            file_path?: string;
            encoding?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("encoding" in data && data.encoding != undefined) {
                    this.encoding = data.encoding;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encoding() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encoding(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session_id?: string;
            file_path?: string;
            encoding?: string;
        }): FileReadRequest {
            const message = new FileReadRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.encoding != null) {
                message.encoding = data.encoding;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                file_path?: string;
                encoding?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.encoding != null) {
                data.encoding = this.encoding;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.file_path.length)
                writer.writeString(2, this.file_path);
            if (this.encoding.length)
                writer.writeString(3, this.encoding);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        message.encoding = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileReadRequest {
            return FileReadRequest.deserialize(bytes);
        }
    }
    export class FileReadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            content?: string;
            metadata?: FileMetadata;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, FileMetadata, 3) as FileMetadata;
        }
        set metadata(value: FileMetadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            content?: string;
            metadata?: ReturnType<typeof FileMetadata.prototype.toObject>;
            error_message?: string;
        }): FileReadResponse {
            const message = new FileReadResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.metadata != null) {
                message.metadata = FileMetadata.fromObject(data.metadata);
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                content?: string;
                metadata?: ReturnType<typeof FileMetadata.prototype.toObject>;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.has_metadata)
                writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileReadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileReadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => message.metadata = FileMetadata.deserialize(reader));
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileReadResponse {
            return FileReadResponse.deserialize(bytes);
        }
    }
    export class FileWriteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            file_path?: string;
            content?: string;
            encoding?: string;
            backup?: boolean;
            create_directories?: boolean;
            confirm_overwrite?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("encoding" in data && data.encoding != undefined) {
                    this.encoding = data.encoding;
                }
                if ("backup" in data && data.backup != undefined) {
                    this.backup = data.backup;
                }
                if ("create_directories" in data && data.create_directories != undefined) {
                    this.create_directories = data.create_directories;
                }
                if ("confirm_overwrite" in data && data.confirm_overwrite != undefined) {
                    this.confirm_overwrite = data.confirm_overwrite;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get encoding() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set encoding(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get backup() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set backup(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get create_directories() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set create_directories(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get confirm_overwrite() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set confirm_overwrite(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session_id?: string;
            file_path?: string;
            content?: string;
            encoding?: string;
            backup?: boolean;
            create_directories?: boolean;
            confirm_overwrite?: boolean;
        }): FileWriteRequest {
            const message = new FileWriteRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.encoding != null) {
                message.encoding = data.encoding;
            }
            if (data.backup != null) {
                message.backup = data.backup;
            }
            if (data.create_directories != null) {
                message.create_directories = data.create_directories;
            }
            if (data.confirm_overwrite != null) {
                message.confirm_overwrite = data.confirm_overwrite;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                file_path?: string;
                content?: string;
                encoding?: string;
                backup?: boolean;
                create_directories?: boolean;
                confirm_overwrite?: boolean;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.encoding != null) {
                data.encoding = this.encoding;
            }
            if (this.backup != null) {
                data.backup = this.backup;
            }
            if (this.create_directories != null) {
                data.create_directories = this.create_directories;
            }
            if (this.confirm_overwrite != null) {
                data.confirm_overwrite = this.confirm_overwrite;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.file_path.length)
                writer.writeString(2, this.file_path);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.encoding.length)
                writer.writeString(4, this.encoding);
            if (this.backup != false)
                writer.writeBool(5, this.backup);
            if (this.create_directories != false)
                writer.writeBool(6, this.create_directories);
            if (this.confirm_overwrite != false)
                writer.writeBool(7, this.confirm_overwrite);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileWriteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileWriteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        message.encoding = reader.readString();
                        break;
                    case 5:
                        message.backup = reader.readBool();
                        break;
                    case 6:
                        message.create_directories = reader.readBool();
                        break;
                    case 7:
                        message.confirm_overwrite = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileWriteRequest {
            return FileWriteRequest.deserialize(bytes);
        }
    }
    export class FileEditRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            file_path?: string;
            patches?: FilePatch[];
            backup?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("patches" in data && data.patches != undefined) {
                    this.patches = data.patches;
                }
                if ("backup" in data && data.backup != undefined) {
                    this.backup = data.backup;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get patches() {
            return pb_1.Message.getRepeatedWrapperField(this, FilePatch, 3) as FilePatch[];
        }
        set patches(value: FilePatch[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get backup() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set backup(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: string;
            file_path?: string;
            patches?: ReturnType<typeof FilePatch.prototype.toObject>[];
            backup?: boolean;
        }): FileEditRequest {
            const message = new FileEditRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.patches != null) {
                message.patches = data.patches.map(item => FilePatch.fromObject(item));
            }
            if (data.backup != null) {
                message.backup = data.backup;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                file_path?: string;
                patches?: ReturnType<typeof FilePatch.prototype.toObject>[];
                backup?: boolean;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.patches != null) {
                data.patches = this.patches.map((item: FilePatch) => item.toObject());
            }
            if (this.backup != null) {
                data.backup = this.backup;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.file_path.length)
                writer.writeString(2, this.file_path);
            if (this.patches.length)
                writer.writeRepeatedMessage(3, this.patches, (item: FilePatch) => item.serialize(writer));
            if (this.backup != false)
                writer.writeBool(4, this.backup);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileEditRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileEditRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.patches, () => pb_1.Message.addToRepeatedWrapperField(message, 3, FilePatch.deserialize(reader), FilePatch));
                        break;
                    case 4:
                        message.backup = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileEditRequest {
            return FileEditRequest.deserialize(bytes);
        }
    }
    export class FilePatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_line?: number;
            end_line?: number;
            new_content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_line" in data && data.start_line != undefined) {
                    this.start_line = data.start_line;
                }
                if ("end_line" in data && data.end_line != undefined) {
                    this.end_line = data.end_line;
                }
                if ("new_content" in data && data.new_content != undefined) {
                    this.new_content = data.new_content;
                }
            }
        }
        get start_line() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_line(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_line() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_line(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            start_line?: number;
            end_line?: number;
            new_content?: string;
        }): FilePatch {
            const message = new FilePatch({});
            if (data.start_line != null) {
                message.start_line = data.start_line;
            }
            if (data.end_line != null) {
                message.end_line = data.end_line;
            }
            if (data.new_content != null) {
                message.new_content = data.new_content;
            }
            return message;
        }
        toObject() {
            const data: {
                start_line?: number;
                end_line?: number;
                new_content?: string;
            } = {};
            if (this.start_line != null) {
                data.start_line = this.start_line;
            }
            if (this.end_line != null) {
                data.end_line = this.end_line;
            }
            if (this.new_content != null) {
                data.new_content = this.new_content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_line != 0)
                writer.writeInt32(1, this.start_line);
            if (this.end_line != 0)
                writer.writeInt32(2, this.end_line);
            if (this.new_content.length)
                writer.writeString(3, this.new_content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilePatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilePatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_line = reader.readInt32();
                        break;
                    case 2:
                        message.end_line = reader.readInt32();
                        break;
                    case 3:
                        message.new_content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FilePatch {
            return FilePatch.deserialize(bytes);
        }
    }
    export class FileDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            file_path?: string;
            recursive?: boolean;
            backup?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("recursive" in data && data.recursive != undefined) {
                    this.recursive = data.recursive;
                }
                if ("backup" in data && data.backup != undefined) {
                    this.backup = data.backup;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get recursive() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set recursive(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get backup() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set backup(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: string;
            file_path?: string;
            recursive?: boolean;
            backup?: boolean;
        }): FileDeleteRequest {
            const message = new FileDeleteRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.recursive != null) {
                message.recursive = data.recursive;
            }
            if (data.backup != null) {
                message.backup = data.backup;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                file_path?: string;
                recursive?: boolean;
                backup?: boolean;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.recursive != null) {
                data.recursive = this.recursive;
            }
            if (this.backup != null) {
                data.backup = this.backup;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.file_path.length)
                writer.writeString(2, this.file_path);
            if (this.recursive != false)
                writer.writeBool(3, this.recursive);
            if (this.backup != false)
                writer.writeBool(4, this.backup);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        message.recursive = reader.readBool();
                        break;
                    case 4:
                        message.backup = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileDeleteRequest {
            return FileDeleteRequest.deserialize(bytes);
        }
    }
    export class FileMoveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            source_path?: string;
            target_path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("source_path" in data && data.source_path != undefined) {
                    this.source_path = data.source_path;
                }
                if ("target_path" in data && data.target_path != undefined) {
                    this.target_path = data.target_path;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set source_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get target_path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set target_path(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            session_id?: string;
            source_path?: string;
            target_path?: string;
        }): FileMoveRequest {
            const message = new FileMoveRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.source_path != null) {
                message.source_path = data.source_path;
            }
            if (data.target_path != null) {
                message.target_path = data.target_path;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                source_path?: string;
                target_path?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.source_path != null) {
                data.source_path = this.source_path;
            }
            if (this.target_path != null) {
                data.target_path = this.target_path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.source_path.length)
                writer.writeString(2, this.source_path);
            if (this.target_path.length)
                writer.writeString(3, this.target_path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileMoveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileMoveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.source_path = reader.readString();
                        break;
                    case 3:
                        message.target_path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileMoveRequest {
            return FileMoveRequest.deserialize(bytes);
        }
    }
    export class DirectoryListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            directory_path?: string;
            recursive?: boolean;
            include_hidden?: boolean;
            pattern?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("directory_path" in data && data.directory_path != undefined) {
                    this.directory_path = data.directory_path;
                }
                if ("recursive" in data && data.recursive != undefined) {
                    this.recursive = data.recursive;
                }
                if ("include_hidden" in data && data.include_hidden != undefined) {
                    this.include_hidden = data.include_hidden;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get directory_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set directory_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get recursive() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set recursive(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get include_hidden() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set include_hidden(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            session_id?: string;
            directory_path?: string;
            recursive?: boolean;
            include_hidden?: boolean;
            pattern?: string;
        }): DirectoryListRequest {
            const message = new DirectoryListRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.directory_path != null) {
                message.directory_path = data.directory_path;
            }
            if (data.recursive != null) {
                message.recursive = data.recursive;
            }
            if (data.include_hidden != null) {
                message.include_hidden = data.include_hidden;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                directory_path?: string;
                recursive?: boolean;
                include_hidden?: boolean;
                pattern?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.directory_path != null) {
                data.directory_path = this.directory_path;
            }
            if (this.recursive != null) {
                data.recursive = this.recursive;
            }
            if (this.include_hidden != null) {
                data.include_hidden = this.include_hidden;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.directory_path.length)
                writer.writeString(2, this.directory_path);
            if (this.recursive != false)
                writer.writeBool(3, this.recursive);
            if (this.include_hidden != false)
                writer.writeBool(4, this.include_hidden);
            if (this.pattern.length)
                writer.writeString(5, this.pattern);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DirectoryListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DirectoryListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.directory_path = reader.readString();
                        break;
                    case 3:
                        message.recursive = reader.readBool();
                        break;
                    case 4:
                        message.include_hidden = reader.readBool();
                        break;
                    case 5:
                        message.pattern = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DirectoryListRequest {
            return DirectoryListRequest.deserialize(bytes);
        }
    }
    export class DirectoryListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            files?: FileMetadata[];
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, FileMetadata, 2) as FileMetadata[];
        }
        set files(value: FileMetadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            files?: ReturnType<typeof FileMetadata.prototype.toObject>[];
            error_message?: string;
        }): DirectoryListResponse {
            const message = new DirectoryListResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.files != null) {
                message.files = data.files.map(item => FileMetadata.fromObject(item));
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                files?: ReturnType<typeof FileMetadata.prototype.toObject>[];
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.files != null) {
                data.files = this.files.map((item: FileMetadata) => item.toObject());
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.files.length)
                writer.writeRepeatedMessage(2, this.files, (item: FileMetadata) => item.serialize(writer));
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DirectoryListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DirectoryListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FileMetadata.deserialize(reader), FileMetadata));
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DirectoryListResponse {
            return DirectoryListResponse.deserialize(bytes);
        }
    }
    export class DiffGenerationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            file_path?: string;
            old_content?: string;
            new_content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("old_content" in data && data.old_content != undefined) {
                    this.old_content = data.old_content;
                }
                if ("new_content" in data && data.new_content != undefined) {
                    this.new_content = data.new_content;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get old_content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set old_content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_content() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set new_content(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: string;
            file_path?: string;
            old_content?: string;
            new_content?: string;
        }): DiffGenerationRequest {
            const message = new DiffGenerationRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.old_content != null) {
                message.old_content = data.old_content;
            }
            if (data.new_content != null) {
                message.new_content = data.new_content;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                file_path?: string;
                old_content?: string;
                new_content?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.old_content != null) {
                data.old_content = this.old_content;
            }
            if (this.new_content != null) {
                data.new_content = this.new_content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.file_path.length)
                writer.writeString(2, this.file_path);
            if (this.old_content.length)
                writer.writeString(3, this.old_content);
            if (this.new_content.length)
                writer.writeString(4, this.new_content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffGenerationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffGenerationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        message.old_content = reader.readString();
                        break;
                    case 4:
                        message.new_content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffGenerationRequest {
            return DiffGenerationRequest.deserialize(bytes);
        }
    }
    export class DiffGenerationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            diff?: DiffPreview;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("diff" in data && data.diff != undefined) {
                    this.diff = data.diff;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get diff() {
            return pb_1.Message.getWrapperField(this, DiffPreview, 2) as DiffPreview;
        }
        set diff(value: DiffPreview) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_diff() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            diff?: ReturnType<typeof DiffPreview.prototype.toObject>;
            error_message?: string;
        }): DiffGenerationResponse {
            const message = new DiffGenerationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.diff != null) {
                message.diff = DiffPreview.fromObject(data.diff);
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                diff?: ReturnType<typeof DiffPreview.prototype.toObject>;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.diff != null) {
                data.diff = this.diff.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.has_diff)
                writer.writeMessage(2, this.diff, () => this.diff.serialize(writer));
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffGenerationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffGenerationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.diff, () => message.diff = DiffPreview.deserialize(reader));
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffGenerationResponse {
            return DiffGenerationResponse.deserialize(bytes);
        }
    }
    export class FileOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            operation_id?: string;
            preview?: DiffPreview;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
                if ("preview" in data && data.preview != undefined) {
                    this.preview = data.preview;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get preview() {
            return pb_1.Message.getWrapperField(this, DiffPreview, 3) as DiffPreview;
        }
        set preview(value: DiffPreview) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_preview() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            operation_id?: string;
            preview?: ReturnType<typeof DiffPreview.prototype.toObject>;
            error_message?: string;
        }): FileOperationResponse {
            const message = new FileOperationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            if (data.preview != null) {
                message.preview = DiffPreview.fromObject(data.preview);
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                operation_id?: string;
                preview?: ReturnType<typeof DiffPreview.prototype.toObject>;
                error_message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            if (this.preview != null) {
                data.preview = this.preview.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.operation_id.length)
                writer.writeString(2, this.operation_id);
            if (this.has_preview)
                writer.writeMessage(3, this.preview, () => this.preview.serialize(writer));
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.operation_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.preview, () => message.preview = DiffPreview.deserialize(reader));
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileOperationResponse {
            return FileOperationResponse.deserialize(bytes);
        }
    }
    export class FileMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            size?: number;
            mtime?: number;
            type?: string;
            permissions?: string;
            checksum?: string;
            encoding?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("mtime" in data && data.mtime != undefined) {
                    this.mtime = data.mtime;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
                if ("checksum" in data && data.checksum != undefined) {
                    this.checksum = data.checksum;
                }
                if ("encoding" in data && data.encoding != undefined) {
                    this.encoding = data.encoding;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get mtime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set mtime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get permissions() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set permissions(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get checksum() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set checksum(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get encoding() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set encoding(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            path?: string;
            size?: number;
            mtime?: number;
            type?: string;
            permissions?: string;
            checksum?: string;
            encoding?: string;
        }): FileMetadata {
            const message = new FileMetadata({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.mtime != null) {
                message.mtime = data.mtime;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.permissions != null) {
                message.permissions = data.permissions;
            }
            if (data.checksum != null) {
                message.checksum = data.checksum;
            }
            if (data.encoding != null) {
                message.encoding = data.encoding;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                size?: number;
                mtime?: number;
                type?: string;
                permissions?: string;
                checksum?: string;
                encoding?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.mtime != null) {
                data.mtime = this.mtime;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions;
            }
            if (this.checksum != null) {
                data.checksum = this.checksum;
            }
            if (this.encoding != null) {
                data.encoding = this.encoding;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.size != 0)
                writer.writeInt64(2, this.size);
            if (this.mtime != 0)
                writer.writeInt64(3, this.mtime);
            if (this.type.length)
                writer.writeString(4, this.type);
            if (this.permissions.length)
                writer.writeString(5, this.permissions);
            if (this.checksum.length)
                writer.writeString(6, this.checksum);
            if (this.encoding.length)
                writer.writeString(7, this.encoding);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.size = reader.readInt64();
                        break;
                    case 3:
                        message.mtime = reader.readInt64();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.permissions = reader.readString();
                        break;
                    case 6:
                        message.checksum = reader.readString();
                        break;
                    case 7:
                        message.encoding = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileMetadata {
            return FileMetadata.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGeminiServiceService {
        static definition = {
            Chat: {
                path: "/gemini.GeminiService/Chat",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: ClientRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ClientRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServerResponse.deserialize(new Uint8Array(bytes))
            },
            GetSessionInfo: {
                path: "/gemini.GeminiService/GetSessionInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SessionInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SessionInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessionInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessionInfoResponse.deserialize(new Uint8Array(bytes))
            },
            GetSessionStats: {
                path: "/gemini.GeminiService/GetSessionStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SessionStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SessionStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessionStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessionStatsResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateConfig: {
                path: "/gemini.GeminiService/UpdateConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConfigUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConfigUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConfigUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConfigUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            GetConfig: {
                path: "/gemini.GeminiService/GetConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetConfigResponse.deserialize(new Uint8Array(bytes))
            },
            ReadFile: {
                path: "/gemini.GeminiService/ReadFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FileReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FileReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FileReadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FileReadResponse.deserialize(new Uint8Array(bytes))
            },
            WriteFile: {
                path: "/gemini.GeminiService/WriteFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FileWriteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FileWriteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FileOperationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FileOperationResponse.deserialize(new Uint8Array(bytes))
            },
            EditFile: {
                path: "/gemini.GeminiService/EditFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FileEditRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FileEditRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FileOperationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FileOperationResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteFile: {
                path: "/gemini.GeminiService/DeleteFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FileDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FileDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FileOperationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FileOperationResponse.deserialize(new Uint8Array(bytes))
            },
            MoveFile: {
                path: "/gemini.GeminiService/MoveFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FileMoveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FileMoveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FileOperationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FileOperationResponse.deserialize(new Uint8Array(bytes))
            },
            ListDirectory: {
                path: "/gemini.GeminiService/ListDirectory",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DirectoryListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DirectoryListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DirectoryListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DirectoryListResponse.deserialize(new Uint8Array(bytes))
            },
            GenerateDiff: {
                path: "/gemini.GeminiService/GenerateDiff",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DiffGenerationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DiffGenerationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DiffGenerationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DiffGenerationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerDuplexStream<ClientRequest, ServerResponse>): void;
        abstract GetSessionInfo(call: grpc_1.ServerUnaryCall<SessionInfoRequest, SessionInfoResponse>, callback: grpc_1.sendUnaryData<SessionInfoResponse>): void;
        abstract GetSessionStats(call: grpc_1.ServerUnaryCall<SessionStatsRequest, SessionStatsResponse>, callback: grpc_1.sendUnaryData<SessionStatsResponse>): void;
        abstract UpdateConfig(call: grpc_1.ServerUnaryCall<ConfigUpdateRequest, ConfigUpdateResponse>, callback: grpc_1.sendUnaryData<ConfigUpdateResponse>): void;
        abstract GetConfig(call: grpc_1.ServerUnaryCall<GetConfigRequest, GetConfigResponse>, callback: grpc_1.sendUnaryData<GetConfigResponse>): void;
        abstract ReadFile(call: grpc_1.ServerUnaryCall<FileReadRequest, FileReadResponse>, callback: grpc_1.sendUnaryData<FileReadResponse>): void;
        abstract WriteFile(call: grpc_1.ServerUnaryCall<FileWriteRequest, FileOperationResponse>, callback: grpc_1.sendUnaryData<FileOperationResponse>): void;
        abstract EditFile(call: grpc_1.ServerUnaryCall<FileEditRequest, FileOperationResponse>, callback: grpc_1.sendUnaryData<FileOperationResponse>): void;
        abstract DeleteFile(call: grpc_1.ServerUnaryCall<FileDeleteRequest, FileOperationResponse>, callback: grpc_1.sendUnaryData<FileOperationResponse>): void;
        abstract MoveFile(call: grpc_1.ServerUnaryCall<FileMoveRequest, FileOperationResponse>, callback: grpc_1.sendUnaryData<FileOperationResponse>): void;
        abstract ListDirectory(call: grpc_1.ServerUnaryCall<DirectoryListRequest, DirectoryListResponse>, callback: grpc_1.sendUnaryData<DirectoryListResponse>): void;
        abstract GenerateDiff(call: grpc_1.ServerUnaryCall<DiffGenerationRequest, DiffGenerationResponse>, callback: grpc_1.sendUnaryData<DiffGenerationResponse>): void;
    }
    export class GeminiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGeminiServiceService.definition, "GeminiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcChunkServiceInterface<ClientRequest, ServerResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<ClientRequest, ServerResponse> => {
            return super.Chat(metadata, options);
        };
        GetSessionInfo: GrpcUnaryServiceInterface<SessionInfoRequest, SessionInfoResponse> = (message: SessionInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SessionInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SessionInfoResponse>, callback?: grpc_1.requestCallback<SessionInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSessionInfo(message, metadata, options, callback);
        };
        GetSessionStats: GrpcUnaryServiceInterface<SessionStatsRequest, SessionStatsResponse> = (message: SessionStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SessionStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SessionStatsResponse>, callback?: grpc_1.requestCallback<SessionStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSessionStats(message, metadata, options, callback);
        };
        UpdateConfig: GrpcUnaryServiceInterface<ConfigUpdateRequest, ConfigUpdateResponse> = (message: ConfigUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConfigUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConfigUpdateResponse>, callback?: grpc_1.requestCallback<ConfigUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateConfig(message, metadata, options, callback);
        };
        GetConfig: GrpcUnaryServiceInterface<GetConfigRequest, GetConfigResponse> = (message: GetConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetConfigResponse>, callback?: grpc_1.requestCallback<GetConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.GetConfig(message, metadata, options, callback);
        };
        ReadFile: GrpcUnaryServiceInterface<FileReadRequest, FileReadResponse> = (message: FileReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FileReadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FileReadResponse>, callback?: grpc_1.requestCallback<FileReadResponse>): grpc_1.ClientUnaryCall => {
            return super.ReadFile(message, metadata, options, callback);
        };
        WriteFile: GrpcUnaryServiceInterface<FileWriteRequest, FileOperationResponse> = (message: FileWriteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, callback?: grpc_1.requestCallback<FileOperationResponse>): grpc_1.ClientUnaryCall => {
            return super.WriteFile(message, metadata, options, callback);
        };
        EditFile: GrpcUnaryServiceInterface<FileEditRequest, FileOperationResponse> = (message: FileEditRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, callback?: grpc_1.requestCallback<FileOperationResponse>): grpc_1.ClientUnaryCall => {
            return super.EditFile(message, metadata, options, callback);
        };
        DeleteFile: GrpcUnaryServiceInterface<FileDeleteRequest, FileOperationResponse> = (message: FileDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, callback?: grpc_1.requestCallback<FileOperationResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteFile(message, metadata, options, callback);
        };
        MoveFile: GrpcUnaryServiceInterface<FileMoveRequest, FileOperationResponse> = (message: FileMoveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FileOperationResponse>, callback?: grpc_1.requestCallback<FileOperationResponse>): grpc_1.ClientUnaryCall => {
            return super.MoveFile(message, metadata, options, callback);
        };
        ListDirectory: GrpcUnaryServiceInterface<DirectoryListRequest, DirectoryListResponse> = (message: DirectoryListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DirectoryListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DirectoryListResponse>, callback?: grpc_1.requestCallback<DirectoryListResponse>): grpc_1.ClientUnaryCall => {
            return super.ListDirectory(message, metadata, options, callback);
        };
        GenerateDiff: GrpcUnaryServiceInterface<DiffGenerationRequest, DiffGenerationResponse> = (message: DiffGenerationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DiffGenerationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DiffGenerationResponse>, callback?: grpc_1.requestCallback<DiffGenerationResponse>): grpc_1.ClientUnaryCall => {
            return super.GenerateDiff(message, metadata, options, callback);
        };
    }
}
