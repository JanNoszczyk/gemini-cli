/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: gemini.v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gemini.v1 {
    export enum ApprovalMode {
        APPROVAL_MODE_UNSPECIFIED = 0,
        REJECT_DANGEROUS_TOOLS = 1,
        AUTO_APPROVE = 2
    }
    export class ClientRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            start_request?: StartRequest;
            prompt?: never;
        } | {
            start_request?: never;
            prompt?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_request" in data && data.start_request != undefined) {
                    this.start_request = data.start_request;
                }
                if ("prompt" in data && data.prompt != undefined) {
                    this.prompt = data.prompt;
                }
            }
        }
        get start_request() {
            return pb_1.Message.getWrapperField(this, StartRequest, 1) as StartRequest;
        }
        set start_request(value: StartRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_start_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get prompt() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set prompt(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_prompt() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "start_request" | "prompt";
            } = {
                0: "none",
                1: "start_request",
                2: "prompt"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            start_request?: ReturnType<typeof StartRequest.prototype.toObject>;
            prompt?: string;
        }): ClientRequest {
            const message = new ClientRequest({});
            if (data.start_request != null) {
                message.start_request = StartRequest.fromObject(data.start_request);
            }
            if (data.prompt != null) {
                message.prompt = data.prompt;
            }
            return message;
        }
        toObject() {
            const data: {
                start_request?: ReturnType<typeof StartRequest.prototype.toObject>;
                prompt?: string;
            } = {};
            if (this.start_request != null) {
                data.start_request = this.start_request.toObject();
            }
            if (this.prompt != null) {
                data.prompt = this.prompt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_request)
                writer.writeMessage(1, this.start_request, () => this.start_request.serialize(writer));
            if (this.has_prompt)
                writer.writeString(2, this.prompt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_request, () => message.start_request = StartRequest.deserialize(reader));
                        break;
                    case 2:
                        message.prompt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientRequest {
            return ClientRequest.deserialize(bytes);
        }
    }
    export class ServerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            session_info?: SessionInfo;
            text_response?: never;
            thought_response?: never;
            tool_started?: never;
            tool_ended?: never;
            error?: never;
        } | {
            session_info?: never;
            text_response?: TextResponse;
            thought_response?: never;
            tool_started?: never;
            tool_ended?: never;
            error?: never;
        } | {
            session_info?: never;
            text_response?: never;
            thought_response?: ThoughtResponse;
            tool_started?: never;
            tool_ended?: never;
            error?: never;
        } | {
            session_info?: never;
            text_response?: never;
            thought_response?: never;
            tool_started?: ToolStartedResponse;
            tool_ended?: never;
            error?: never;
        } | {
            session_info?: never;
            text_response?: never;
            thought_response?: never;
            tool_started?: never;
            tool_ended?: ToolEndedResponse;
            error?: never;
        } | {
            session_info?: never;
            text_response?: never;
            thought_response?: never;
            tool_started?: never;
            tool_ended?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_info" in data && data.session_info != undefined) {
                    this.session_info = data.session_info;
                }
                if ("text_response" in data && data.text_response != undefined) {
                    this.text_response = data.text_response;
                }
                if ("thought_response" in data && data.thought_response != undefined) {
                    this.thought_response = data.thought_response;
                }
                if ("tool_started" in data && data.tool_started != undefined) {
                    this.tool_started = data.tool_started;
                }
                if ("tool_ended" in data && data.tool_ended != undefined) {
                    this.tool_ended = data.tool_ended;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get session_info() {
            return pb_1.Message.getWrapperField(this, SessionInfo, 1) as SessionInfo;
        }
        set session_info(value: SessionInfo) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_session_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get text_response() {
            return pb_1.Message.getWrapperField(this, TextResponse, 2) as TextResponse;
        }
        set text_response(value: TextResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_text_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get thought_response() {
            return pb_1.Message.getWrapperField(this, ThoughtResponse, 3) as ThoughtResponse;
        }
        set thought_response(value: ThoughtResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_thought_response() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get tool_started() {
            return pb_1.Message.getWrapperField(this, ToolStartedResponse, 4) as ToolStartedResponse;
        }
        set tool_started(value: ToolStartedResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_tool_started() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get tool_ended() {
            return pb_1.Message.getWrapperField(this, ToolEndedResponse, 5) as ToolEndedResponse;
        }
        set tool_ended(value: ToolEndedResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_tool_ended() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 6) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "session_info" | "text_response" | "thought_response" | "tool_started" | "tool_ended" | "error";
            } = {
                0: "none",
                1: "session_info",
                2: "text_response",
                3: "thought_response",
                4: "tool_started",
                5: "tool_ended",
                6: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            session_info?: ReturnType<typeof SessionInfo.prototype.toObject>;
            text_response?: ReturnType<typeof TextResponse.prototype.toObject>;
            thought_response?: ReturnType<typeof ThoughtResponse.prototype.toObject>;
            tool_started?: ReturnType<typeof ToolStartedResponse.prototype.toObject>;
            tool_ended?: ReturnType<typeof ToolEndedResponse.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): ServerResponse {
            const message = new ServerResponse({});
            if (data.session_info != null) {
                message.session_info = SessionInfo.fromObject(data.session_info);
            }
            if (data.text_response != null) {
                message.text_response = TextResponse.fromObject(data.text_response);
            }
            if (data.thought_response != null) {
                message.thought_response = ThoughtResponse.fromObject(data.thought_response);
            }
            if (data.tool_started != null) {
                message.tool_started = ToolStartedResponse.fromObject(data.tool_started);
            }
            if (data.tool_ended != null) {
                message.tool_ended = ToolEndedResponse.fromObject(data.tool_ended);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                session_info?: ReturnType<typeof SessionInfo.prototype.toObject>;
                text_response?: ReturnType<typeof TextResponse.prototype.toObject>;
                thought_response?: ReturnType<typeof ThoughtResponse.prototype.toObject>;
                tool_started?: ReturnType<typeof ToolStartedResponse.prototype.toObject>;
                tool_ended?: ReturnType<typeof ToolEndedResponse.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.session_info != null) {
                data.session_info = this.session_info.toObject();
            }
            if (this.text_response != null) {
                data.text_response = this.text_response.toObject();
            }
            if (this.thought_response != null) {
                data.thought_response = this.thought_response.toObject();
            }
            if (this.tool_started != null) {
                data.tool_started = this.tool_started.toObject();
            }
            if (this.tool_ended != null) {
                data.tool_ended = this.tool_ended.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session_info)
                writer.writeMessage(1, this.session_info, () => this.session_info.serialize(writer));
            if (this.has_text_response)
                writer.writeMessage(2, this.text_response, () => this.text_response.serialize(writer));
            if (this.has_thought_response)
                writer.writeMessage(3, this.thought_response, () => this.thought_response.serialize(writer));
            if (this.has_tool_started)
                writer.writeMessage(4, this.tool_started, () => this.tool_started.serialize(writer));
            if (this.has_tool_ended)
                writer.writeMessage(5, this.tool_ended, () => this.tool_ended.serialize(writer));
            if (this.has_error)
                writer.writeMessage(6, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session_info, () => message.session_info = SessionInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.text_response, () => message.text_response = TextResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.thought_response, () => message.thought_response = ThoughtResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.tool_started, () => message.tool_started = ToolStartedResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.tool_ended, () => message.tool_ended = ToolEndedResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerResponse {
            return ServerResponse.deserialize(bytes);
        }
    }
    export class StartRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            prompt?: string;
            model?: string;
            approval_mode?: ApprovalMode;
            core_tools?: string[];
            exclude_tools?: string[];
            advanced_config?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("prompt" in data && data.prompt != undefined) {
                    this.prompt = data.prompt;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("approval_mode" in data && data.approval_mode != undefined) {
                    this.approval_mode = data.approval_mode;
                }
                if ("core_tools" in data && data.core_tools != undefined) {
                    this.core_tools = data.core_tools;
                }
                if ("exclude_tools" in data && data.exclude_tools != undefined) {
                    this.exclude_tools = data.exclude_tools;
                }
                if ("advanced_config" in data && data.advanced_config != undefined) {
                    this.advanced_config = data.advanced_config;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get prompt() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set prompt(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get approval_mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, ApprovalMode.APPROVAL_MODE_UNSPECIFIED) as ApprovalMode;
        }
        set approval_mode(value: ApprovalMode) {
            pb_1.Message.setField(this, 5, value);
        }
        get core_tools() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set core_tools(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get exclude_tools() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set exclude_tools(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get advanced_config() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 8) as dependency_1.google.protobuf.Struct;
        }
        set advanced_config(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_advanced_config() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            session_id?: string;
            prompt?: string;
            model?: string;
            approval_mode?: ApprovalMode;
            core_tools?: string[];
            exclude_tools?: string[];
            advanced_config?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): StartRequest {
            const message = new StartRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.prompt != null) {
                message.prompt = data.prompt;
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.approval_mode != null) {
                message.approval_mode = data.approval_mode;
            }
            if (data.core_tools != null) {
                message.core_tools = data.core_tools;
            }
            if (data.exclude_tools != null) {
                message.exclude_tools = data.exclude_tools;
            }
            if (data.advanced_config != null) {
                message.advanced_config = dependency_1.google.protobuf.Struct.fromObject(data.advanced_config);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                prompt?: string;
                model?: string;
                approval_mode?: ApprovalMode;
                core_tools?: string[];
                exclude_tools?: string[];
                advanced_config?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.prompt != null) {
                data.prompt = this.prompt;
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.approval_mode != null) {
                data.approval_mode = this.approval_mode;
            }
            if (this.core_tools != null) {
                data.core_tools = this.core_tools;
            }
            if (this.exclude_tools != null) {
                data.exclude_tools = this.exclude_tools;
            }
            if (this.advanced_config != null) {
                data.advanced_config = this.advanced_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.prompt.length)
                writer.writeString(2, this.prompt);
            if (this.model.length)
                writer.writeString(4, this.model);
            if (this.approval_mode != ApprovalMode.APPROVAL_MODE_UNSPECIFIED)
                writer.writeEnum(5, this.approval_mode);
            if (this.core_tools.length)
                writer.writeRepeatedString(6, this.core_tools);
            if (this.exclude_tools.length)
                writer.writeRepeatedString(7, this.exclude_tools);
            if (this.has_advanced_config)
                writer.writeMessage(8, this.advanced_config, () => this.advanced_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.prompt = reader.readString();
                        break;
                    case 4:
                        message.model = reader.readString();
                        break;
                    case 5:
                        message.approval_mode = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        reader.readMessage(message.advanced_config, () => message.advanced_config = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartRequest {
            return StartRequest.deserialize(bytes);
        }
    }
    export class SessionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_id?: string;
        }): SessionInfo {
            const message = new SessionInfo({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionInfo {
            return SessionInfo.deserialize(bytes);
        }
    }
    export class TextResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            content?: string;
        }): TextResponse {
            const message = new TextResponse({});
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TextResponse {
            return TextResponse.deserialize(bytes);
        }
    }
    export class ThoughtResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            thought?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("thought" in data && data.thought != undefined) {
                    this.thought = data.thought;
                }
            }
        }
        get thought() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set thought(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            thought?: string;
        }): ThoughtResponse {
            const message = new ThoughtResponse({});
            if (data.thought != null) {
                message.thought = data.thought;
            }
            return message;
        }
        toObject() {
            const data: {
                thought?: string;
            } = {};
            if (this.thought != null) {
                data.thought = this.thought;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.thought.length)
                writer.writeString(1, this.thought);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThoughtResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThoughtResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.thought = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ThoughtResponse {
            return ThoughtResponse.deserialize(bytes);
        }
    }
    export class ToolStartedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            args?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get args() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 2) as dependency_1.google.protobuf.Struct;
        }
        set args(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_args() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            args?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): ToolStartedResponse {
            const message = new ToolStartedResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.args != null) {
                message.args = dependency_1.google.protobuf.Struct.fromObject(data.args);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                args?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.args != null) {
                data.args = this.args.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_args)
                writer.writeMessage(2, this.args, () => this.args.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolStartedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolStartedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.args, () => message.args = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolStartedResponse {
            return ToolStartedResponse.deserialize(bytes);
        }
    }
    export class ToolEndedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            result_summary?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("result_summary" in data && data.result_summary != undefined) {
                    this.result_summary = data.result_summary;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get result_summary() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set result_summary(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            result_summary?: string;
        }): ToolEndedResponse {
            const message = new ToolEndedResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.result_summary != null) {
                message.result_summary = data.result_summary;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                result_summary?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.result_summary != null) {
                data.result_summary = this.result_summary;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.result_summary.length)
                writer.writeString(2, this.result_summary);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolEndedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolEndedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.result_summary = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolEndedResponse {
            return ToolEndedResponse.deserialize(bytes);
        }
    }
    export class ErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            code?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            code?: number;
        }): ErrorResponse {
            const message = new ErrorResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                code?: number;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.code != 0)
                writer.writeInt32(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGeminiServiceService {
        static definition = {
            Chat: {
                path: "/gemini.v1.GeminiService/Chat",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: ClientRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ClientRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServerResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerDuplexStream<ClientRequest, ServerResponse>): void;
    }
    export class GeminiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGeminiServiceService.definition, "GeminiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcChunkServiceInterface<ClientRequest, ServerResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<ClientRequest, ServerResponse> => {
            return super.Chat(metadata, options);
        };
    }
}
