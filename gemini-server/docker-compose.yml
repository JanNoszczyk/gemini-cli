version: '3.8'

services:
  gemini-server:
    build: .
    container_name: gemini-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./workspaces:/app/workspaces
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - gemini-network

  redis:
    image: redis:7-alpine
    container_name: gemini-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - gemini-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres
    environment:
      - POSTGRES_DB=gemini_server
      - POSTGRES_USER=gemini
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gemini-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: gemini-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gemini-server
    networks:
      - gemini-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:

networks:
  gemini-network:
    driver: bridge