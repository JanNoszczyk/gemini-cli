// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/gemini.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to create a new session
type CreateSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WorkspacePath string                 `protobuf:"bytes,2,opt,name=workspace_path,json=workspacePath,proto3" json:"workspace_path,omitempty"`
	ApiKey        string                 `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_proto_gemini_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSessionRequest) GetWorkspacePath() string {
	if x != nil {
		return x.WorkspacePath
	}
	return ""
}

func (x *CreateSessionRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// Response for session creation
type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_proto_gemini_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateSessionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Chat request from client
type ChatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Prompt        string                 `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	mi := &file_proto_gemini_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{2}
}

func (x *ChatRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

// Chat response from server (streamed)
type ChatResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*ChatResponse_Text
	//	*ChatResponse_ToolCall
	//	*ChatResponse_ToolResult
	//	*ChatResponse_Error
	//	*ChatResponse_Thought
	Content       isChatResponse_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_proto_gemini_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{3}
}

func (x *ChatResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatResponse) GetContent() isChatResponse_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatResponse) GetText() *TextContent {
	if x != nil {
		if x, ok := x.Content.(*ChatResponse_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *ChatResponse) GetToolCall() *ToolCallRequest {
	if x != nil {
		if x, ok := x.Content.(*ChatResponse_ToolCall); ok {
			return x.ToolCall
		}
	}
	return nil
}

func (x *ChatResponse) GetToolResult() *ToolCallResponse {
	if x != nil {
		if x, ok := x.Content.(*ChatResponse_ToolResult); ok {
			return x.ToolResult
		}
	}
	return nil
}

func (x *ChatResponse) GetError() *ErrorContent {
	if x != nil {
		if x, ok := x.Content.(*ChatResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ChatResponse) GetThought() *ThoughtContent {
	if x != nil {
		if x, ok := x.Content.(*ChatResponse_Thought); ok {
			return x.Thought
		}
	}
	return nil
}

type isChatResponse_Content interface {
	isChatResponse_Content()
}

type ChatResponse_Text struct {
	Text *TextContent `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type ChatResponse_ToolCall struct {
	ToolCall *ToolCallRequest `protobuf:"bytes,3,opt,name=tool_call,json=toolCall,proto3,oneof"`
}

type ChatResponse_ToolResult struct {
	ToolResult *ToolCallResponse `protobuf:"bytes,4,opt,name=tool_result,json=toolResult,proto3,oneof"`
}

type ChatResponse_Error struct {
	Error *ErrorContent `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

type ChatResponse_Thought struct {
	Thought *ThoughtContent `protobuf:"bytes,6,opt,name=thought,proto3,oneof"`
}

func (*ChatResponse_Text) isChatResponse_Content() {}

func (*ChatResponse_ToolCall) isChatResponse_Content() {}

func (*ChatResponse_ToolResult) isChatResponse_Content() {}

func (*ChatResponse_Error) isChatResponse_Content() {}

func (*ChatResponse_Thought) isChatResponse_Content() {}

// Text content
type TextContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_proto_gemini_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{4}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Tool call request
type ToolCallRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	Arguments     string                 `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCallRequest) Reset() {
	*x = ToolCallRequest{}
	mi := &file_proto_gemini_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCallRequest) ProtoMessage() {}

func (x *ToolCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCallRequest.ProtoReflect.Descriptor instead.
func (*ToolCallRequest) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{5}
}

func (x *ToolCallRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToolCallRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// Tool call response
type ToolCallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	Result        string                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCallResponse) Reset() {
	*x = ToolCallResponse{}
	mi := &file_proto_gemini_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCallResponse) ProtoMessage() {}

func (x *ToolCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCallResponse.ProtoReflect.Descriptor instead.
func (*ToolCallResponse) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{6}
}

func (x *ToolCallResponse) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToolCallResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ToolCallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Error content
type ErrorContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorContent) Reset() {
	*x = ErrorContent{}
	mi := &file_proto_gemini_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorContent) ProtoMessage() {}

func (x *ErrorContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorContent.ProtoReflect.Descriptor instead.
func (*ErrorContent) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{7}
}

func (x *ErrorContent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorContent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Thought content (for Gemini 2.0+)
type ThoughtContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Thought       string                 `protobuf:"bytes,1,opt,name=thought,proto3" json:"thought,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThoughtContent) Reset() {
	*x = ThoughtContent{}
	mi := &file_proto_gemini_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThoughtContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThoughtContent) ProtoMessage() {}

func (x *ThoughtContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThoughtContent.ProtoReflect.Descriptor instead.
func (*ThoughtContent) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{8}
}

func (x *ThoughtContent) GetThought() string {
	if x != nil {
		return x.Thought
	}
	return ""
}

// Request to end a session
type EndSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSessionRequest) Reset() {
	*x = EndSessionRequest{}
	mi := &file_proto_gemini_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionRequest) ProtoMessage() {}

func (x *EndSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionRequest.ProtoReflect.Descriptor instead.
func (*EndSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{9}
}

func (x *EndSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Response for ending a session
type EndSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSessionResponse) Reset() {
	*x = EndSessionResponse{}
	mi := &file_proto_gemini_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionResponse) ProtoMessage() {}

func (x *EndSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionResponse.ProtoReflect.Descriptor instead.
func (*EndSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{10}
}

func (x *EndSessionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EndSessionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Request to get session status
type GetSessionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionStatusRequest) Reset() {
	*x = GetSessionStatusRequest{}
	mi := &file_proto_gemini_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStatusRequest) ProtoMessage() {}

func (x *GetSessionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSessionStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{11}
}

func (x *GetSessionStatusRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Response with session status
type GetSessionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Active        bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastActivity  int64                  `protobuf:"varint,5,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionStatusResponse) Reset() {
	*x = GetSessionStatusResponse{}
	mi := &file_proto_gemini_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStatusResponse) ProtoMessage() {}

func (x *GetSessionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gemini_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSessionStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_gemini_proto_rawDescGZIP(), []int{12}
}

func (x *GetSessionStatusResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetSessionStatusResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSessionStatusResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *GetSessionStatusResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetSessionStatusResponse) GetLastActivity() int64 {
	if x != nil {
		return x.LastActivity
	}
	return 0
}

var File_proto_gemini_proto protoreflect.FileDescriptor

const file_proto_gemini_proto_rawDesc = "" +
	"\n" +
	"\x12proto/gemini.proto\x12\x06gemini\"o\n" +
	"\x14CreateSessionRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x0eworkspace_path\x18\x02 \x01(\tR\rworkspacePath\x12\x17\n" +
	"\aapi_key\x18\x03 \x01(\tR\x06apiKey\"f\n" +
	"\x15CreateSessionResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"D\n" +
	"\vChatRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x16\n" +
	"\x06prompt\x18\x02 \x01(\tR\x06prompt\"\xba\x02\n" +
	"\fChatResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12)\n" +
	"\x04text\x18\x02 \x01(\v2\x13.gemini.TextContentH\x00R\x04text\x126\n" +
	"\ttool_call\x18\x03 \x01(\v2\x17.gemini.ToolCallRequestH\x00R\btoolCall\x12;\n" +
	"\vtool_result\x18\x04 \x01(\v2\x18.gemini.ToolCallResponseH\x00R\n" +
	"toolResult\x12,\n" +
	"\x05error\x18\x05 \x01(\v2\x14.gemini.ErrorContentH\x00R\x05error\x122\n" +
	"\athought\x18\x06 \x01(\v2\x16.gemini.ThoughtContentH\x00R\athoughtB\t\n" +
	"\acontent\"!\n" +
	"\vTextContent\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"L\n" +
	"\x0fToolCallRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x1c\n" +
	"\targuments\x18\x02 \x01(\tR\targuments\"a\n" +
	"\x10ToolCallResponse\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x16\n" +
	"\x06result\x18\x02 \x01(\tR\x06result\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\"<\n" +
	"\fErrorContent\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\"*\n" +
	"\x0eThoughtContent\x12\x18\n" +
	"\athought\x18\x01 \x01(\tR\athought\"2\n" +
	"\x11EndSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"D\n" +
	"\x12EndSessionResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"8\n" +
	"\x17GetSessionStatusRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\xae\x01\n" +
	"\x18GetSessionStatusResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x16\n" +
	"\x06active\x18\x03 \x01(\bR\x06active\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\x03R\tcreatedAt\x12#\n" +
	"\rlast_activity\x18\x05 \x01(\x03R\flastActivity2\xb0\x02\n" +
	"\rGeminiService\x12L\n" +
	"\rCreateSession\x12\x1c.gemini.CreateSessionRequest\x1a\x1d.gemini.CreateSessionResponse\x125\n" +
	"\x04Chat\x12\x13.gemini.ChatRequest\x1a\x14.gemini.ChatResponse(\x010\x01\x12C\n" +
	"\n" +
	"EndSession\x12\x19.gemini.EndSessionRequest\x1a\x1a.gemini.EndSessionResponse\x12U\n" +
	"\x10GetSessionStatus\x12\x1f.gemini.GetSessionStatusRequest\x1a .gemini.GetSessionStatusResponseB%Z#github.com/gemini-cli/backend/protob\x06proto3"

var (
	file_proto_gemini_proto_rawDescOnce sync.Once
	file_proto_gemini_proto_rawDescData []byte
)

func file_proto_gemini_proto_rawDescGZIP() []byte {
	file_proto_gemini_proto_rawDescOnce.Do(func() {
		file_proto_gemini_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_gemini_proto_rawDesc), len(file_proto_gemini_proto_rawDesc)))
	})
	return file_proto_gemini_proto_rawDescData
}

var file_proto_gemini_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_gemini_proto_goTypes = []any{
	(*CreateSessionRequest)(nil),     // 0: gemini.CreateSessionRequest
	(*CreateSessionResponse)(nil),    // 1: gemini.CreateSessionResponse
	(*ChatRequest)(nil),              // 2: gemini.ChatRequest
	(*ChatResponse)(nil),             // 3: gemini.ChatResponse
	(*TextContent)(nil),              // 4: gemini.TextContent
	(*ToolCallRequest)(nil),          // 5: gemini.ToolCallRequest
	(*ToolCallResponse)(nil),         // 6: gemini.ToolCallResponse
	(*ErrorContent)(nil),             // 7: gemini.ErrorContent
	(*ThoughtContent)(nil),           // 8: gemini.ThoughtContent
	(*EndSessionRequest)(nil),        // 9: gemini.EndSessionRequest
	(*EndSessionResponse)(nil),       // 10: gemini.EndSessionResponse
	(*GetSessionStatusRequest)(nil),  // 11: gemini.GetSessionStatusRequest
	(*GetSessionStatusResponse)(nil), // 12: gemini.GetSessionStatusResponse
}
var file_proto_gemini_proto_depIdxs = []int32{
	4,  // 0: gemini.ChatResponse.text:type_name -> gemini.TextContent
	5,  // 1: gemini.ChatResponse.tool_call:type_name -> gemini.ToolCallRequest
	6,  // 2: gemini.ChatResponse.tool_result:type_name -> gemini.ToolCallResponse
	7,  // 3: gemini.ChatResponse.error:type_name -> gemini.ErrorContent
	8,  // 4: gemini.ChatResponse.thought:type_name -> gemini.ThoughtContent
	0,  // 5: gemini.GeminiService.CreateSession:input_type -> gemini.CreateSessionRequest
	2,  // 6: gemini.GeminiService.Chat:input_type -> gemini.ChatRequest
	9,  // 7: gemini.GeminiService.EndSession:input_type -> gemini.EndSessionRequest
	11, // 8: gemini.GeminiService.GetSessionStatus:input_type -> gemini.GetSessionStatusRequest
	1,  // 9: gemini.GeminiService.CreateSession:output_type -> gemini.CreateSessionResponse
	3,  // 10: gemini.GeminiService.Chat:output_type -> gemini.ChatResponse
	10, // 11: gemini.GeminiService.EndSession:output_type -> gemini.EndSessionResponse
	12, // 12: gemini.GeminiService.GetSessionStatus:output_type -> gemini.GetSessionStatusResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_gemini_proto_init() }
func file_proto_gemini_proto_init() {
	if File_proto_gemini_proto != nil {
		return
	}
	file_proto_gemini_proto_msgTypes[3].OneofWrappers = []any{
		(*ChatResponse_Text)(nil),
		(*ChatResponse_ToolCall)(nil),
		(*ChatResponse_ToolResult)(nil),
		(*ChatResponse_Error)(nil),
		(*ChatResponse_Thought)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_gemini_proto_rawDesc), len(file_proto_gemini_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_gemini_proto_goTypes,
		DependencyIndexes: file_proto_gemini_proto_depIdxs,
		MessageInfos:      file_proto_gemini_proto_msgTypes,
	}.Build()
	File_proto_gemini_proto = out.File
	file_proto_gemini_proto_goTypes = nil
	file_proto_gemini_proto_depIdxs = nil
}
