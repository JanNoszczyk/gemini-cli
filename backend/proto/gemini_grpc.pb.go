// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/gemini.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeminiService_CreateSession_FullMethodName    = "/gemini.GeminiService/CreateSession"
	GeminiService_Chat_FullMethodName             = "/gemini.GeminiService/Chat"
	GeminiService_EndSession_FullMethodName       = "/gemini.GeminiService/EndSession"
	GeminiService_GetSessionStatus_FullMethodName = "/gemini.GeminiService/GetSessionStatus"
)

// GeminiServiceClient is the client API for GeminiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Gemini service provides streaming chat functionality
type GeminiServiceClient interface {
	// Creates a new chat session
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Streaming chat - client sends prompts, server streams responses
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatRequest, ChatResponse], error)
	// Ends a session
	EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error)
	// Gets session status
	GetSessionStatus(ctx context.Context, in *GetSessionStatusRequest, opts ...grpc.CallOption) (*GetSessionStatusResponse, error)
}

type geminiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeminiServiceClient(cc grpc.ClientConnInterface) GeminiServiceClient {
	return &geminiServiceClient{cc}
}

func (c *geminiServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, GeminiService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geminiServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatRequest, ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GeminiService_ServiceDesc.Streams[0], GeminiService_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatRequest, ChatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GeminiService_ChatClient = grpc.BidiStreamingClient[ChatRequest, ChatResponse]

func (c *geminiServiceClient) EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndSessionResponse)
	err := c.cc.Invoke(ctx, GeminiService_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geminiServiceClient) GetSessionStatus(ctx context.Context, in *GetSessionStatusRequest, opts ...grpc.CallOption) (*GetSessionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatusResponse)
	err := c.cc.Invoke(ctx, GeminiService_GetSessionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeminiServiceServer is the server API for GeminiService service.
// All implementations must embed UnimplementedGeminiServiceServer
// for forward compatibility.
//
// The Gemini service provides streaming chat functionality
type GeminiServiceServer interface {
	// Creates a new chat session
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Streaming chat - client sends prompts, server streams responses
	Chat(grpc.BidiStreamingServer[ChatRequest, ChatResponse]) error
	// Ends a session
	EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error)
	// Gets session status
	GetSessionStatus(context.Context, *GetSessionStatusRequest) (*GetSessionStatusResponse, error)
	mustEmbedUnimplementedGeminiServiceServer()
}

// UnimplementedGeminiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeminiServiceServer struct{}

func (UnimplementedGeminiServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedGeminiServiceServer) Chat(grpc.BidiStreamingServer[ChatRequest, ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedGeminiServiceServer) EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedGeminiServiceServer) GetSessionStatus(context.Context, *GetSessionStatusRequest) (*GetSessionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStatus not implemented")
}
func (UnimplementedGeminiServiceServer) mustEmbedUnimplementedGeminiServiceServer() {}
func (UnimplementedGeminiServiceServer) testEmbeddedByValue()                       {}

// UnsafeGeminiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeminiServiceServer will
// result in compilation errors.
type UnsafeGeminiServiceServer interface {
	mustEmbedUnimplementedGeminiServiceServer()
}

func RegisterGeminiServiceServer(s grpc.ServiceRegistrar, srv GeminiServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeminiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeminiService_ServiceDesc, srv)
}

func _GeminiService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeminiServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeminiService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeminiServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeminiService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeminiServiceServer).Chat(&grpc.GenericServerStream[ChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GeminiService_ChatServer = grpc.BidiStreamingServer[ChatRequest, ChatResponse]

func _GeminiService_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeminiServiceServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeminiService_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeminiServiceServer).EndSession(ctx, req.(*EndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeminiService_GetSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeminiServiceServer).GetSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeminiService_GetSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeminiServiceServer).GetSessionStatus(ctx, req.(*GetSessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeminiService_ServiceDesc is the grpc.ServiceDesc for GeminiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeminiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gemini.GeminiService",
	HandlerType: (*GeminiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _GeminiService_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _GeminiService_EndSession_Handler,
		},
		{
			MethodName: "GetSessionStatus",
			Handler:    _GeminiService_GetSessionStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _GeminiService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gemini.proto",
}
